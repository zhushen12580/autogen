"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8131],{62943:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var s=n(85893),a=n(11151);const o={custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_oai_assistant_groupchat.ipynb",description:"This Jupyter Notebook demonstrates how to use the GPTAssistantAgent in AutoGen's group chat mode, enabling collaborative task performance through automated chat with agents powered by LLMs, tools, or humans.",source_notebook:"/notebook/agentchat_oai_assistant_groupchat.ipynb",tags:["OpenAI Assistant","group chat"],title:"Auto Generated Agent Chat: Group Chat with GPTAssistantAgent"},i="Auto Generated Agent Chat: Group Chat with GPTAssistantAgent",r={id:"notebooks/agentchat_oai_assistant_groupchat",title:"Auto Generated Agent Chat: Group Chat with GPTAssistantAgent",description:"This Jupyter Notebook demonstrates how to use the GPTAssistantAgent in AutoGen's group chat mode, enabling collaborative task performance through automated chat with agents powered by LLMs, tools, or humans.",source:"@site/docs/notebooks/agentchat_oai_assistant_groupchat.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_oai_assistant_groupchat",permalink:"/autogen/docs/notebooks/agentchat_oai_assistant_groupchat",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_oai_assistant_groupchat.ipynb",tags:[{label:"OpenAI Assistant",permalink:"/autogen/docs/tags/open-ai-assistant"},{label:"group chat",permalink:"/autogen/docs/tags/group-chat"}],version:"current",frontMatter:{custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_oai_assistant_groupchat.ipynb",description:"This Jupyter Notebook demonstrates how to use the GPTAssistantAgent in AutoGen's group chat mode, enabling collaborative task performance through automated chat with agents powered by LLMs, tools, or humans.",source_notebook:"/notebook/agentchat_oai_assistant_groupchat.ipynb",tags:["OpenAI Assistant","group chat"],title:"Auto Generated Agent Chat: Group Chat with GPTAssistantAgent"},sidebar:"notebooksSidebar",previous:{title:"Chat with OpenAI Assistant using function call in AutoGen: OSS Insights for Advanced GitHub Data Analysis",permalink:"/autogen/docs/notebooks/agentchat_oai_assistant_function_call"},next:{title:"Auto Generated Agent Chat: GPTAssistant with Code Interpreter",permalink:"/autogen/docs/notebooks/agentchat_oai_code_interpreter"}},u={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Set your API Endpoint",id:"set-your-api-endpoint",level:2},{value:"Define GPTAssistantAgent and GroupChat",id:"define-gptassistantagent-and-groupchat",level:2},{value:"Initiate Group Chat",id:"initiate-group-chat",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"auto-generated-agent-chat-group-chat-with-gptassistantagent",children:"Auto Generated Agent Chat: Group Chat with GPTAssistantAgent"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/notebook/agentchat_oai_assistant_groupchat.ipynb",children:(0,s.jsx)(t.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,s.jsx)(t.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_oai_assistant_groupchat.ipynb",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,s.jsxs)(t.p,{children:["AutoGen offers conversable agents powered by LLM, tool or human, which\ncan be used to perform tasks collectively via automated chat. This\nframework allows tool use and human participation through multi-agent\nconversation. Please find documentation about this feature\n",(0,s.jsx)(t.a,{href:"https://microsoft.github.io/autogen/docs/Use-Cases/agent_chat",children:"here"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["In this notebook, we demonstrate how to get multiple ",(0,s.jsx)(t.code,{children:"GPTAssistantAgent"}),"\nconverse through group chat."]}),"\n",(0,s.jsx)(t.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsxs)(t.p,{children:["AutoGen requires ",(0,s.jsx)(t.code,{children:"Python>=3.8"}),". To run this notebook example, please\ninstall:"]}),"\n",(0,s.jsxs)(t.admonition,{title:"Requirements",type:"info",children:[(0,s.jsxs)(t.p,{children:["Install ",(0,s.jsx)(t.code,{children:"pyautogen"}),":"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"pip install pyautogen\n"})}),(0,s.jsxs)(t.p,{children:["For more information, please refer to the ",(0,s.jsx)(t.a,{href:"/docs/installation/",children:"installation guide"}),"."]})]}),"\n",(0,s.jsx)(t.h2,{id:"set-your-api-endpoint",children:"Set your API Endpoint"}),"\n",(0,s.jsxs)(t.p,{children:["The\n",(0,s.jsx)(t.a,{href:"https://microsoft.github.io/autogen/docs/reference/oai/openai_utils#config_list_from_json",children:(0,s.jsx)(t.code,{children:"config_list_from_json"})}),"\nfunction loads a list of configurations from an environment variable or\na json file."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'import autogen\nfrom autogen.agentchat import AssistantAgent\nfrom autogen.agentchat.contrib.gpt_assistant_agent import GPTAssistantAgent\n\nconfig_list_gpt4 = autogen.config_list_from_json(\n    "OAI_CONFIG_LIST",\n    filter_dict={\n        "model": ["gpt-4", "gpt-4-1106-preview", "gpt-4-32k"],\n    },\n)\n'})}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["Learn more about configuring LLMs for agents ",(0,s.jsx)(t.a,{href:"/docs/topics/llm_configuration",children:"here"}),"."]})}),"\n",(0,s.jsx)(t.h2,{id:"define-gptassistantagent-and-groupchat",children:"Define GPTAssistantAgent and GroupChat"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# Define user proxy agent\nllm_config = {"config_list": config_list_gpt4, "cache_seed": 45}\nuser_proxy = autogen.UserProxyAgent(\n    name="User_proxy",\n    system_message="A human admin.",\n    code_execution_config={\n        "last_n_messages": 2,\n        "work_dir": "groupchat",\n        "use_docker": False,\n    },  # Please set use_docker=True if docker is available to run the generated code. Using docker is safer than running the generated code directly.\n    human_input_mode="TERMINATE",\n)\n\n# define two GPTAssistants\ncoder = GPTAssistantAgent(\n    name="Coder",\n    llm_config={\n        "config_list": config_list_gpt4,\n    },\n    instructions=AssistantAgent.DEFAULT_SYSTEM_MESSAGE,\n)\n\nanalyst = GPTAssistantAgent(\n    name="Data_analyst",\n    instructions="You are a data analyst that offers insight into data.",\n    llm_config={\n        "config_list": config_list_gpt4,\n    },\n)\n# define group chat\ngroupchat = autogen.GroupChat(agents=[user_proxy, coder, analyst], messages=[], max_round=10)\nmanager = autogen.GroupChatManager(groupchat=groupchat, llm_config=llm_config)\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",children:"assistant_id was None, creating a new assistant\nassistant_id was None, creating a new assistant\n"})}),"\n",(0,s.jsx)(t.h2,{id:"initiate-group-chat",children:"Initiate Group Chat"}),"\n",(0,s.jsx)(t.p,{children:"Now all is set, we can initiate group chat."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"user_proxy.initiate_chat(\n    manager,\n    message=\"Get the number of issues and pull requests for the repository 'microsoft/autogen' over the past three weeks and offer analysis to the data. You should print the data in csv format grouped by weeks.\",\n)\n# type exit to terminate the chat\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",children:"User_proxy (to chat_manager):\n\nGet the number of issues and pull requests for the repository 'microsoft/autogen' over the past three weeks and offer analyzes to the data. You should print the data in csv format grouped by weeks.\n\n--------------------------------------------------------------------------------\nCoder (to chat_manager):\n\nTo gather the number of issues and pull requests for the repository 'microsoft/autogen' over the past three weeks and to offer an analysis of the data, we'll need to modify the previous script.\n\nWe will enhance the script to gather data from the past three weeks, separated by each week, and then output the data in CSV format, grouped by the week during which the issues and pull requests were created. This will require us to make multiple API calls for each week and aggregate the data accordingly.\n\nI will provide you a python script to execute.\n\n```python\n# filename: github_data_weekly_analyzer.py\nimport requests\nfrom datetime import datetime, timedelta\nimport csv\n\n# Constants to define the GitHub repository and the API URLs\nREPO_OWNER = 'microsoft'\nREPO_NAME = 'autogen'\nGITHUB_API_ISSUES = f'https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/issues'\nGITHUB_API_PULLS = f'https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/pulls'\n\n# Function to get data from GitHub API with pagination\ndef get_github_data(url, since_date, until_date):\n    items = []\n    page = 1\n    while True:\n        params = {\n            'state': 'all',\n            'since': since_date,\n            'until': until_date,\n            'page': page,\n            'per_page': 100\n        }\n        response = requests.get(url, params=params)\n        if response.status_code != 200:\n            raise Exception(f'Failed to fetch data from GitHub API. Status Code: {response.status_code}')\n        page_data = response.json()\n        items.extend(page_data)\n\n        if not page_data or 'next' not in response.links:\n            break\n\n        page += 1\n\n    return items\n\n# Function to filter and count issues and pull requests by week\ndef count_items_by_week(items):\n    counts_by_week = {}\n    for item in items:\n        # Using the created_at date to determine the week\n        created_at = datetime.strptime(item['created_at'], '%Y-%m-%dT%H:%M:%SZ')\n        week = created_at.strftime('%U')\n        if week not in counts_by_week:\n            counts_by_week[week] = 0\n        counts_by_week[week] += 1\n    return counts_by_week\n\n# Wrap the task in a function\ndef analyze_data():\n    try:\n        # Initialize CSV data\n        csv_data = [['week', 'issue_count', 'pull_request_count']]\n        \n        # Get data for the past three weeks\n        for weeks_ago in range(3):\n            # Calculate date range for the particular week\n            until_date = datetime.utcnow() - timedelta(weeks=weeks_ago)\n            since_date = until_date - timedelta(days=7)\n            since_date_str = since_date.strftime('%Y-%m-%dT%H:%M:%SZ')\n            until_date_str = until_date.strftime('%Y-%m-%dT%H:%M:%SZ')\n\n            # Get issues and pull requests for the date range\n            issues = get_github_data(GITHUB_API_ISSUES, since_date_str, until_date_str)\n            pull_requests = get_github_data(GITHUB_API_PULLS, since_date_str, until_date_str)\n\n            # Filter out pull requests from issues\n            issues = [issue for issue in issues if 'pull_request' not in issue]\n\n            # Count issues and pull requests by week\n            issue_counts = count_items_by_week(issues)\n            pull_request_counts = count_items_by_week(pull_requests)\n\n            # Aggregate csv data\n            for week in issue_counts:\n                csv_data.append([week, issue_counts.get(week, 0), pull_request_counts.get(week, 0)])\n\n        # Output CSV data to stdout\n        writer = csv.writer(sys.stdout)\n        writer.writerows(csv_data)\n\n    except Exception as e:\n        print(str(e))\n\n# Run the analyze function\nif __name__ == \"__main__\":\n    analyze_data()\n```\n\nPlease save this code as `github_data_weekly_analyzer.py` and run it. The script will output the number of issues and pull requests for the repository 'microsoft/autogen' over the past three weeks, grouped by week in CSV format.\n\nIf there are any issues or errors during the execution of this script, please let me know the exact error message, and I will assist you in resolving it.\n\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nUser_proxy (to chat_manager):\n\nexitcode: 0 (execution succeeded)\nCode output: \nname 'sys' is not defined\n\n\n--------------------------------------------------------------------------------\nCoder (to chat_manager):\n\nIt looks like I forgot to import `sys` module which is necessary for writing output to stdout using the `csv.writer`. I will fix the code by adding the import statement for the `sys` module at the beginning of the script. Please run the updated script below:\n\n```python\n# filename: github_data_weekly_analyzer.py\nimport requests\nfrom datetime import datetime, timedelta\nimport csv\nimport sys\n\n# Constants to define the GitHub repository and the API URLs\nREPO_OWNER = 'microsoft'\nREPO_NAME = 'autogen'\nGITHUB_API_ISSUES = f'https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/issues'\nGITHUB_API_PULLS = f'https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/pulls'\n\n# Function to get data from GitHub API with pagination\ndef get_github_data(url, since_date, until_date):\n    items = []\n    page = 1\n    while True:\n        params = {\n            'state': 'all',\n            'since': since_date,\n            'until': until_date,\n            'page': page,\n            'per_page': 100\n        }\n        response = requests.get(url, params=params)\n        if response.status_code != 200:\n            raise Exception(f'Failed to fetch data from GitHub API. Status Code: {response.status_code}')\n        page_data = response.json()\n        items.extend(page_data)\n\n        if not page_data or 'next' not in response.links:\n            break\n\n        page += 1\n\n    return items\n\n# Function to filter and count issues and pull requests by week\ndef count_items_by_week(items):\n    counts_by_week = {}\n    for item in items:\n        # Using the created_at date to determine the week\n        created_at = datetime.strptime(item['created_at'], '%Y-%m-%dT%H:%M:%SZ')\n        week = created_at.strftime('%U')\n        if week not in counts_by_week:\n            counts_by_week[week] = 0\n        counts_by_week[week] += 1\n    return counts_by_week\n\n# Wrap the task in a function\ndef analyze_data():\n    try:\n        # Initialize CSV data\n        csv_data = [['week', 'issue_count', 'pull_request_count']]\n        \n        # Get data for the past three weeks\n        for weeks_ago in range(3):\n            # Calculate date range for the particular week\n            until_date = datetime.utcnow() - timedelta(weeks=weeks_ago)\n            since_date = until_date - timedelta(days=7)\n            since_date_str = since_date.strftime('%Y-%m-%dT%H:%M:%SZ')\n            until_date_str = until_date.strftime('%Y-%m-%dT%H:%M:%SZ')\n\n            # Get issues and pull requests for the date range\n            issues = get_github_data(GITHUB_API_ISSUES, since_date_str, until_date_str)\n            pull_requests = get_github_data(GITHUB_API_PULLS, since_date_str, until_date_str)\n\n            # Filter out pull requests from issues\n            issues = [issue for issue in issues if 'pull_request' not in issue]\n\n            # Count issues and pull requests by week\n            issue_counts = count_items_by_week(issues)\n            pull_request_counts = count_items_by_week(pull_requests)\n\n            # Aggregate csv data\n            for week in issue_counts:\n                csv_data.append([week, issue_counts.get(week, 0), pull_request_counts.get(week, 0)])\n\n        # Output CSV data to stdout\n        writer = csv.writer(sys.stdout)\n        writer.writerows(csv_data)\n\n    except Exception as e:\n        print(str(e))\n\n# Run the analyze function\nif __name__ == \"__main__\":\n    analyze_data()\n```\n\nOnce again, please save this code as `github_data_weekly_analyzer.py` and run it. The script should produce the intended CSV output. If you run into any more issues, let me know, and I will provide further assistance.\n\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nUser_proxy (to chat_manager):\n\nexitcode: 0 (execution succeeded)\nCode output: \nweek,issue_count,pull_request_count\n46,11,10\n45,40,30\n44,9,26\n43,3,61\n42,5,36\n41,6,41\n40,2,34\n39,2,19\n38,1,4\n17,1,0\n46,11,10\n45,46,30\n44,47,26\n43,15,61\n42,11,36\n41,13,41\n40,4,34\n39,5,19\n38,1,4\n27,1,0\n19,1,0\n17,1,0\n46,11,10\n45,46,30\n44,48,26\n43,54,61\n42,21,36\n41,16,41\n40,7,34\n39,6,19\n38,1,4\n33,1,0\n27,1,0\n19,1,0\n17,1,0\n\n\n--------------------------------------------------------------------------------\nData_analyst (to chat_manager):\n\nThe script executed successfully and provided the following data output in CSV format for the past three weeks:\n\n```\nweek,issue_count,pull_request_count\n46,11,10\n45,40,30\n44,9,26\n```\n\nWeek numbers are based on the `%U` directive of `strftime`, which considers week 00 as the first week of the year with a Sunday in it.\n\nHere's the analysis by week:\n\n- Week 46: There were 11 issues and 10 pull requests. This suggests a balanced amount of reported issues and new code contributions. The relatively close numbers might indicate that the repository sees simultaneous reporting of issues and active development.\n  \n- Week 45: This week shows significantly more activity than the other two, with 40 issues and 30 pull requests being recorded. This could be a result of a coordinated milestone or sprint ending, where a large set of changes were made, and corresponding issues either surfaced or were also worked on.\n  \n- Week 44: The activity dropped to 9 issues and 26 pull requests. While the number of issues decreased, the number of pull requests remained substantial. This may imply a continuation of effort to address the issues raised in the busier previous week or ongoing development work.\n\nThe overall impression over the past three weeks is that the `microsoft/autogen` repository is actively maintained and developed, with varying levels of activity that could be associated with the development cycle or external events impacting the project.\n\nPlease note that the numbers may be overlapping because the GitHub API will include issues and pull requests updated within the date range, which could increase the count if the items are updated but not necessarily created within that range.\n\nIt's also important to consider that the collected data might not fully represent what happened in each week if there are items created before Week 44 that were updated during the weeks considered. For a more accurate approach, we would need to consider only issues and pull requests created within each week specifically, which would require additional filtering based on the `created_at` attribute.\n\nIf more in-depth analysis or longer trends are needed, additional data over a more extended period would be recommended, along with information about the nature of the issues and pull requests (e.g., what kind of issues are most common, how quickly they're closed, how often pull requests are merged, etc.).\n\n\n--------------------------------------------------------------------------------\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",children:"execute_code was called without specifying a value for use_docker. Since the python docker package is not available, code will be run natively. Note: this fallback behavior is subject to change\nexecute_code was called without specifying a value for use_docker. Since the python docker package is not available, code will be run natively. Note: this fallback behavior is subject to change\n"})})]})}function l(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>i});var s=n(67294);const a={},o=s.createContext(a);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);