"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[555],{60812:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var o=i(85893),t=i(11151);const a={custom_edit_url:"https://github.com/microsoft/autogen/edit/main/website/docs/topics/non-openai-models/cloud-gemini_vertexai.ipynb",description:"Using Gemini with AutoGen via VertexAI",source_notebook:"/website/docs/topics/non-openai-models/cloud-gemini_vertexai.ipynb",tags:["gemini","vertexai"],title:"Use AutoGen with Gemini via VertexAI"},s="Use AutoGen with Gemini via VertexAI",r={id:"topics/non-openai-models/cloud-gemini_vertexai",title:"Use AutoGen with Gemini via VertexAI",description:"Using Gemini with AutoGen via VertexAI",source:"@site/docs/topics/non-openai-models/cloud-gemini_vertexai.mdx",sourceDirName:"topics/non-openai-models",slug:"/topics/non-openai-models/cloud-gemini_vertexai",permalink:"/autogen/docs/topics/non-openai-models/cloud-gemini_vertexai",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/topics/non-openai-models/cloud-gemini_vertexai.ipynb",tags:[{label:"gemini",permalink:"/autogen/docs/tags/gemini"},{label:"vertexai",permalink:"/autogen/docs/tags/vertexai"}],version:"current",frontMatter:{custom_edit_url:"https://github.com/microsoft/autogen/edit/main/website/docs/topics/non-openai-models/cloud-gemini_vertexai.ipynb",description:"Using Gemini with AutoGen via VertexAI",source_notebook:"/website/docs/topics/non-openai-models/cloud-gemini_vertexai.ipynb",tags:["gemini","vertexai"],title:"Use AutoGen with Gemini via VertexAI"},sidebar:"docsSidebar",previous:{title:"Using Gemini in AutoGen with Other LLMs",permalink:"/autogen/docs/topics/non-openai-models/cloud-gemini"},next:{title:"Groq",permalink:"/autogen/docs/topics/non-openai-models/cloud-groq"}},l={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Install other Dependencies of this Notebook",id:"install-other-dependencies-of-this-notebook",level:3},{value:"Google Cloud Account",id:"google-cloud-account",level:3},{value:"Enable Google Cloud APIs",id:"enable-google-cloud-apis",level:3},{value:"Enable API for Gemini",id:"enable-api-for-gemini",level:4},{value:"Enable API for Vertex AI",id:"enable-api-for-vertex-ai",level:3},{value:"Create a Service Account",id:"create-a-service-account",level:3},{value:"Configure Authentication",id:"configure-authentication",level:3},{value:"<a></a>Use Service Account Keyfile",id:"use-service-account-keyfile",level:4},{value:"Use the Google Default Credentials",id:"use-the-google-default-credentials",level:4},{value:"Authentication with the Google Auth Library for Python",id:"authentication-with-the-google-auth-library-for-python",level:4},{value:"Example Config List",id:"example-config-list",level:2},{value:"Configure Safety Settings for VertexAI",id:"configure-safety-settings-for-vertexai",level:2},{value:"Example with Gemini Multimodal",id:"example-with-gemini-multimodal",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"use-autogen-with-gemini-via-vertexai",children:"Use AutoGen with Gemini via VertexAI"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/website/docs/topics/non-openai-models/cloud-gemini_vertexai.ipynb",children:(0,o.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,o.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/website/docs/topics/non-openai-models/cloud-gemini_vertexai.ipynb",children:(0,o.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,o.jsx)(n.p,{children:"This notebook demonstrates how to use Autogen with Gemini via Vertex AI,\nwhich enables enhanced authentication method that also supports\nenterprise requirements using service accounts or even a personal Google\ncloud account."}),"\n",(0,o.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,o.jsx)(n.p,{children:"Install AutoGen with Gemini features:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"pip install pyautogen[gemini]\n"})}),"\n",(0,o.jsx)(n.h3,{id:"install-other-dependencies-of-this-notebook",children:"Install other Dependencies of this Notebook"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"pip install chromadb markdownify pypdf\n"})}),"\n",(0,o.jsx)(n.h3,{id:"google-cloud-account",children:"Google Cloud Account"}),"\n",(0,o.jsxs)(n.p,{children:["To use VertexAI a Google Cloud account is needed. If you do not have one\nyet, just sign up for a free trial ",(0,o.jsx)(n.a,{href:"https://cloud.google.com",children:"here"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Login to your account at\n",(0,o.jsx)(n.a,{href:"https://console.cloud.google.com",children:"console.cloud.google.com"})]}),"\n",(0,o.jsxs)(n.p,{children:["In the next step we create a Google Cloud project, which is needed for\nVertexAI. The official guide for creating a project is available is\n",(0,o.jsx)(n.a,{href:"https://developers.google.com/workspace/guides/create-project",children:"here"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"We will name our project Autogen-with-Gemini."}),"\n",(0,o.jsx)(n.h3,{id:"enable-google-cloud-apis",children:"Enable Google Cloud APIs"}),"\n",(0,o.jsx)(n.p,{children:"If you wish to use Gemini with your personal account, then creating a\nGoogle Cloud account is enough. However, if a service account is needed,\nthen a few extra steps are needed."}),"\n",(0,o.jsx)(n.h4,{id:"enable-api-for-gemini",children:"Enable API for Gemini"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"For enabling Gemini for Google Cloud search for \u201capi\u201d and select\nEnabled APIs & services."}),"\n",(0,o.jsx)(n.li,{children:"Then click ENABLE APIS AND SERVICES."}),"\n",(0,o.jsxs)(n.li,{children:["Search for Gemini, and select Gemini for Google Cloud. ",(0,o.jsx)("br",{})," A\ndirect link will look like this for our autogen-with-gemini project:\n",(0,o.jsx)(n.a,{href:"https://console.cloud.google.com/apis/library/cloudaicompanion.googleapis.com?project=autogen-with-gemini&supportedpurview=project",children:"https://console.cloud.google.com/apis/library/cloudaicompanion.googleapis.com?project=autogen-with-gemini&supportedpurview=project"})]}),"\n",(0,o.jsx)(n.li,{children:"Click ENABLE for Gemini for Google Cloud."}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"enable-api-for-vertex-ai",children:"Enable API for Vertex AI"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"For enabling Vertex AI for Google Cloud search for \u201capi\u201d and select\nEnabled APIs & services."}),"\n",(0,o.jsx)(n.li,{children:"Then click ENABLE APIS AND SERVICES."}),"\n",(0,o.jsxs)(n.li,{children:["Search for Vertex AI, and select Vertex AI API. ",(0,o.jsx)("br",{})," A direct link\nfor our autogen-with-gemini will be:\n",(0,o.jsx)(n.a,{href:"https://console.cloud.google.com/apis/library/aiplatform.googleapis.com?project=autogen-with-gemini",children:"https://console.cloud.google.com/apis/library/aiplatform.googleapis.com?project=autogen-with-gemini"})]}),"\n",(0,o.jsx)(n.li,{children:"Click ENABLE Vertex AI API for Google Cloud."}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"create-a-service-account",children:"Create a Service Account"}),"\n",(0,o.jsxs)(n.p,{children:["You can find an overview of service accounts ",(0,o.jsx)(n.a,{href:"https://console.cloud.google.com/iam-admin/serviceaccounts",children:"can be found in the cloud\nconsole"})]}),"\n",(0,o.jsxs)(n.p,{children:["Detailed guide:\n",(0,o.jsx)(n.a,{href:"https://cloud.google.com/iam/docs/service-accounts-create",children:"https://cloud.google.com/iam/docs/service-accounts-create"})]}),"\n",(0,o.jsx)(n.p,{children:"A service account can be created within the scope of a project, so a\nproject needs to be selected."}),"\n",(0,o.jsx)("img",{src:"https://github.com/microsoft/autogen/blob/main/website/static/img/create_gcp_svc.png?raw=true",width:"1000"}),"\n",(0,o.jsxs)(n.p,{children:["Next we assign the ",(0,o.jsx)(n.a,{href:"https://cloud.google.com/vertex-ai/docs/general/access-control#aiplatform.user",children:"Vertex AI\nUser"}),"\nfor the service account. This can be done in the ",(0,o.jsx)(n.a,{href:"https://console.cloud.google.com/iam-admin/iam?project=autogen-with-gemini",children:"Google Cloud\nconsole"}),"\nin our ",(0,o.jsx)(n.code,{children:"autogen-with-gemini"})," project.",(0,o.jsx)("br",{})," Alternatively, we can also\ngrant the ",(0,o.jsx)(n.a,{href:"https://cloud.google.com/vertex-ai/docs/general/access-control#aiplatform.user",children:"Vertex AI\nUser"}),"\nrole by running a command using the gcloud CLI, for example in ",(0,o.jsx)(n.a,{href:"https://shell.cloud.google.com/cloudshell",children:"Cloud\nShell"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"gcloud projects add-iam-policy-binding autogen-with-gemini \\\n    --member=serviceAccount:autogen@autogen-with-gemini.iam.gserviceaccount.com --role roles/aiplatform.user\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Under IAM & Admin > Service Account select the newly created\nservice accounts, and click the option \u201cManage keys\u201d among the\nitems."}),"\n",(0,o.jsxs)(n.li,{children:["From the \u201cADD KEY\u201d dropdown select \u201cCreate new key\u201d and select the\nJSON format and click CREATE.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"The new key will be downloaded automatically."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["You can then upload the service account key file to the from where\nyou will be running autogen.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Please consider restricting the permissions on the key file. For\nexample, you could run\n",(0,o.jsx)(n.code,{children:"chmod 600 autogen-with-gemini-service-account-key.json"})," if your\nkeyfile is called autogen-with-gemini-service-account-key.json."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"configure-authentication",children:"Configure Authentication"}),"\n",(0,o.jsxs)(n.p,{children:["Authentication happens using standard ",(0,o.jsx)(n.a,{href:"https://cloud.google.com/docs/authentication",children:"Google Cloud authentication\nmethods"}),", ",(0,o.jsx)("br",{})," which\nmeans that either an already active session can be reused, or by\nspecifying the Google application credentials of a service account.\n",(0,o.jsx)("br",{}),(0,o.jsx)("br",{})," Additionally, AutoGen also supports authentication using\n",(0,o.jsx)(n.code,{children:"Credentials"})," objects in Python with the ",(0,o.jsx)(n.a,{href:"https://google-auth.readthedocs.io/",children:"google-auth\nlibrary"}),", which enables even more\nflexibility.",(0,o.jsx)("br",{})," For example, we can even use impersonated credentials."]}),"\n",(0,o.jsxs)(n.h4,{id:"use-service-account-keyfile",children:[(0,o.jsx)("a",{id:"use_svc_keyfile"}),"Use Service Account Keyfile"]}),"\n",(0,o.jsxs)(n.p,{children:["The Google Cloud service account can be specified by setting the\n",(0,o.jsx)(n.code,{children:"GOOGLE_APPLICATION_CREDENTIALS"})," environment variable to the path to the\nJSON key file of the service account. ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(n.p,{children:["We could even just directly set the environment variable, or we can add\nthe ",(0,o.jsx)(n.code,{children:'"google_application_credentials"'})," key with the respective value for\nour model in the OAI_CONFIG_LIST."]}),"\n",(0,o.jsx)(n.h4,{id:"use-the-google-default-credentials",children:"Use the Google Default Credentials"}),"\n",(0,o.jsxs)(n.p,{children:["If you are using ",(0,o.jsx)(n.a,{href:"https://shell.cloud.google.com/cloudshell",children:"Cloud\nShell"})," or ",(0,o.jsx)(n.a,{href:"https://shell.cloud.google.com/cloudshell/editor",children:"Cloud Shell\neditor"})," in Google\nCloud, ",(0,o.jsx)("br",{})," then you are already authenticated. If you have the Google\nCloud SDK installed locally, ",(0,o.jsx)("br",{})," then you can login by running\n",(0,o.jsx)(n.code,{children:"gcloud auth application-default login"})," in the command line."]}),"\n",(0,o.jsxs)(n.p,{children:["Detailed instructions for installing the Google Cloud SDK can be found\n",(0,o.jsx)(n.a,{href:"https://cloud.google.com/sdk/docs/install",children:"here"}),"."]}),"\n",(0,o.jsx)(n.h4,{id:"authentication-with-the-google-auth-library-for-python",children:"Authentication with the Google Auth Library for Python"}),"\n",(0,o.jsxs)(n.p,{children:["The google-auth library supports a wide range of authentication\nscenarios, and you can simply pass a previously created ",(0,o.jsx)(n.code,{children:"Credentials"}),"\nobject to the ",(0,o.jsx)(n.code,{children:"llm_config"}),".",(0,o.jsx)("br",{})," The ",(0,o.jsx)(n.a,{href:"https://google-auth.readthedocs.io/",children:"official\ndocumentation"})," of the Python\npackage provides a detailed overview of the supported methods and usage\nexamples.",(0,o.jsx)("br",{})," If you are already authenticated, like in ",(0,o.jsx)(n.a,{href:"https://shell.cloud.google.com/cloudshell",children:"Cloud\nShell"}),", or after running the\n",(0,o.jsx)(n.code,{children:"gcloud auth application-default login"})," command in a CLI, then the\n",(0,o.jsx)(n.code,{children:"google.auth.default()"})," Python method will automatically return your\ncurrently active credentials."]}),"\n",(0,o.jsx)(n.h2,{id:"example-config-list",children:"Example Config List"}),"\n",(0,o.jsxs)(n.p,{children:["The config could look like the following (change ",(0,o.jsx)(n.code,{children:"project_id"})," and\n",(0,o.jsx)(n.code,{children:"google_application_credentials"}),"):"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'config_list = [\n    {\n        "model": "gemini-pro",\n        "api_type": "google",\n        "project_id": "autogen-with-gemini",\n        "location": "us-west1"\n    },\n    {\n        "model": "gemini-1.5-pro-001",\n        "api_type": "google",\n        "project_id": "autogen-with-gemini",\n        "location": "us-west1"\n    },\n    {\n        "model": "gemini-1.5-pro",\n        "api_type": "google",\n        "project_id": "autogen-with-gemini",\n        "location": "us-west1",\n        "google_application_credentials": "autogen-with-gemini-service-account-key.json"\n    },\n    {\n        "model": "gemini-pro-vision",\n        "api_type": "google",\n        "project_id": "autogen-with-gemini",\n        "location": "us-west1"\n    }\n]\n'})}),"\n",(0,o.jsx)(n.h2,{id:"configure-safety-settings-for-vertexai",children:"Configure Safety Settings for VertexAI"}),"\n",(0,o.jsx)(n.p,{children:"Configuring safety settings for VertexAI is slightly different, as we\nhave to use the speicialized safety setting object types instead of\nplain strings"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from vertexai.generative_models import HarmBlockThreshold, HarmCategory\n\nsafety_settings = {\n    HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_ONLY_HIGH,\n    HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_ONLY_HIGH,\n    HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_ONLY_HIGH,\n    HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_ONLY_HIGH,\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import os\nfrom typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union\n\nimport chromadb\nfrom PIL import Image\nfrom termcolor import colored\n\nimport autogen\nfrom autogen import Agent, AssistantAgent, ConversableAgent, UserProxyAgent\nfrom autogen.agentchat.contrib.img_utils import _to_pil, get_image_data\nfrom autogen.agentchat.contrib.multimodal_conversable_agent import MultimodalConversableAgent\nfrom autogen.agentchat.contrib.retrieve_user_proxy_agent import RetrieveUserProxyAgent\nfrom autogen.code_utils import DEFAULT_MODEL, UNKNOWN, content_str, execute_code, extract_code, infer_lang\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'config_list_gemini = autogen.config_list_from_json(\n    "OAI_CONFIG_LIST",\n    filter_dict={\n        "model": ["gemini-1.5-pro"],\n    },\n)\n\nconfig_list_gemini_vision = autogen.config_list_from_json(\n    "OAI_CONFIG_LIST",\n    filter_dict={\n        "model": ["gemini-pro-vision"],\n    },\n)\n\nfor config_list in [config_list_gemini, config_list_gemini_vision]:\n    for config_list_item in config_list:\n        config_list_item["safety_settings"] = safety_settings\n\nseed = 25  # for caching\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'assistant = AssistantAgent(\n    "assistant", llm_config={"config_list": config_list_gemini, "seed": seed}, max_consecutive_auto_reply=3\n)\n\nuser_proxy = UserProxyAgent(\n    "user_proxy",\n    code_execution_config={"work_dir": "coding", "use_docker": False},\n    human_input_mode="NEVER",\n    is_termination_msg=lambda x: content_str(x.get("content")).find("TERMINATE") >= 0,\n)\n\nresult = user_proxy.initiate_chat(\n    assistant,\n    message="""\n    Compute the integral of the function f(x)=x^2 on the interval 0 to 1 using a Python script,\n    which returns the value of the definite integral""",\n)\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"user_proxy (to assistant):\n\n\n    Compute the integral of the function f(x)=x^2 on the interval 0 to 1 using a Python script,\n    which returns the value of the definite integral\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nPlan:\n1. (code) Use Python's `scipy.integrate.quad` function to compute the integral. \n\n```python\n# filename: integral.py\nfrom scipy.integrate import quad\n\ndef f(x):\n  return x**2\n\nresult, error = quad(f, 0, 1)\n\nprint(f\"The definite integral of x^2 from 0 to 1 is: {result}\")\n```\n\nLet me know when you have executed this code. \n\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nuser_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nThe definite integral of x^2 from 0 to 1 is: 0.33333333333333337\n\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nThe script executed successfully and returned the definite integral's value as approximately 0.33333333333333337. \n\nThis aligns with the analytical solution. The indefinite integral of x^2 is (x^3)/3. Evaluating this from 0 to 1 gives us (1^3)/3 - (0^3)/3 = 1/3 = 0.33333...\n\nTherefore, the script successfully computed the integral of x^2 from 0 to 1.\n\nTERMINATE\n\n\n--------------------------------------------------------------------------------\n"})}),"\n",(0,o.jsx)(n.h2,{id:"example-with-gemini-multimodal",children:"Example with Gemini Multimodal"}),"\n",(0,o.jsxs)(n.p,{children:["Authentication is the same for vision models as for the text based\nGemini models. ",(0,o.jsx)("br",{})," In this example an object of type ",(0,o.jsx)(n.code,{children:"Credentials"}),"\nwill be supplied in order to authenticate.",(0,o.jsx)("br",{})," Here, we will use the\ngoogle application default credentials, so make sure to run the\nfollowing commands if you are not yet authenticated:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"export GOOGLE_APPLICATION_CREDENTIALS=autogen-with-gemini-service-account-key.json\ngcloud auth application-default login\ngcloud config set project autogen-with-gemini\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"GOOGLE_APPLICATION_CREDENTIALS"})," environment variable is a path to\nour service account JSON keyfile, as described in the ",(0,o.jsx)(n.a,{href:"#use_svc_keyfile",children:"Use Service\nAccount Keyfile"})," section above.",(0,o.jsx)("br",{})," We also need to\nset the Google cloud project, which is ",(0,o.jsx)(n.code,{children:"autogen-with-gemini"})," in this\nexample.",(0,o.jsx)("br",{}),(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(n.p,{children:["Note, we could also run ",(0,o.jsx)(n.code,{children:"gcloud auth application-default login"})," to use\nour personal Google account instead of a service account. In this case\nwe need to run the following commands:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"gcloud gcloud auth application-default login\ngcloud config set project autogen-with-gemini\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import google.auth\n\nscopes = ["https://www.googleapis.com/auth/cloud-platform"]\n\ncredentials, project_id = google.auth.default(scopes)\n\ngemini_vision_config = [\n    {\n        "model": "gemini-pro-vision",\n        "api_type": "google",\n        "project_id": project_id,\n        "credentials": credentials,\n        "location": "us-west1",\n        "safety_settings": safety_settings,\n    }\n]\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'image_agent = MultimodalConversableAgent(\n    "Gemini Vision", llm_config={"config_list": gemini_vision_config, "seed": seed}, max_consecutive_auto_reply=1\n)\n\nuser_proxy = UserProxyAgent("user_proxy", human_input_mode="NEVER", max_consecutive_auto_reply=0)\n\nuser_proxy.initiate_chat(\n    image_agent,\n    message="""Describe what is in this image?\n<img https://github.com/microsoft/autogen/blob/main/website/static/img/autogen_agentchat.png?raw=true>.""",\n)\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"user_proxy (to Gemini Vision):\n\nDescribe what is in this image?\n<image>.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\nGemini Vision (to user_proxy):\n\n The image describes a conversational agent that is able to have a conversation with a human user. The agent can be customized to the user's preferences. The conversation can be in form of a joint chat or hierarchical chat.\n\n--------------------------------------------------------------------------------\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"ChatResult(chat_id=None, chat_history=[{'content': 'Describe what is in this image?\\n<img https://github.com/microsoft/autogen/blob/main/website/static/img/autogen_agentchat.png?raw=true>.', 'role': 'assistant'}, {'content': \" The image describes a conversational agent that is able to have a conversation with a human user. The agent can be customized to the user's preferences. The conversation can be in form of a joint chat or hierarchical chat.\", 'role': 'user'}], summary=\" The image describes a conversational agent that is able to have a conversation with a human user. The agent can be customized to the user's preferences. The conversation can be in form of a joint chat or hierarchical chat.\", cost={'usage_including_cached_inference': {'total_cost': 0.0001995, 'gemini-pro-vision': {'cost': 0.0001995, 'prompt_tokens': 267, 'completion_tokens': 44, 'total_tokens': 311}}, 'usage_excluding_cached_inference': {'total_cost': 0}}, human_input=[])\n"})}),"\n",(0,o.jsx)(n.h1,{id:"use-gemini-via-the-openai-library-in-autogen",children:"Use Gemini via the OpenAI Library in Autogen"}),"\n",(0,o.jsxs)(n.p,{children:["Using Gemini via the OpenAI library is also possible once you are\nalready authenticated. ",(0,o.jsx)("br",{})," Run ",(0,o.jsx)(n.code,{children:"gcloud auth application-default login"}),"\nto set up application default credentials locally for the example\nbelow.",(0,o.jsx)("br",{})," Also set the Google cloud project on the CLI if you have not\ndone so far: ",(0,o.jsx)("br",{})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"gcloud config set project autogen-with-gemini\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The prerequisites are essentially the same as in the example above.",(0,o.jsx)("br",{})]}),"\n",(0,o.jsxs)(n.p,{children:["You can read more on the topic in the ",(0,o.jsx)(n.a,{href:"https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/call-gemini-using-openai-library",children:"official Google\ndocs"}),".\n",(0,o.jsx)("br",{})," A list of currently supported models can also be found in the\n",(0,o.jsx)(n.a,{href:"https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/call-gemini-using-openai-library#supported_models",children:"docs"}),"\n",(0,o.jsx)("br",{})," ",(0,o.jsx)("br",{})," Note, that you will need to refresh your token regularly, by\ndefault every 1 hour."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import google.auth\n\nscopes = ["https://www.googleapis.com/auth/cloud-platform"]\ncreds, project = google.auth.default(scopes)\nauth_req = google.auth.transport.requests.Request()\ncreds.refresh(auth_req)\nlocation = "us-west1"\nprompt_price_per_1k = (\n    0.000125  # For more up-to-date prices see https://cloud.google.com/vertex-ai/generative-ai/pricing\n)\ncompletion_token_price_per_1k = (\n    0.000375  # For more up-to-date prices see https://cloud.google.com/vertex-ai/generative-ai/pricing\n)\n\nopenai_gemini_config = [\n    {\n        "model": "google/gemini-1.5-pro-001",\n        "api_type": "openai",\n        "base_url": f"https://{location}-aiplatform.googleapis.com/v1beta1/projects/{project}/locations/{location}/endpoints/openapi",\n        "api_key": creds.token,\n        "price": [prompt_price_per_1k, completion_token_price_per_1k],\n    }\n]\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'assistant = AssistantAgent("assistant", llm_config={"config_list": openai_gemini_config}, max_consecutive_auto_reply=3)\n\nuser_proxy = UserProxyAgent(\n    "user_proxy",\n    code_execution_config={"work_dir": "coding", "use_docker": False},\n    human_input_mode="NEVER",\n    is_termination_msg=lambda x: content_str(x.get("content")).find("TERMINATE") >= 0,\n)\n\nresult = user_proxy.initiate_chat(\n    assistant,\n    message="""\n    Compute the integral of the function f(x)=x^3 on the interval 0 to 10 using a Python script,\n    which returns the value of the definite integral.""",\n)\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:'user_proxy (to assistant):\n\n\n    Compute the integral of the function f(x)=x^3 on the interval 0 to 10 using a Python script,\n    which returns the value of the definite integral.\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\n```python\n# filename: integral.py\ndef integrate_x_cubed(a, b):\n  """\n  This function calculates the definite integral of x^3 from a to b.\n\n  Args:\n      a: The lower limit of integration.\n      b: The upper limit of integration.\n\n  Returns:\n      The value of the definite integral.\n  """\n  return (b**4 - a**4) / 4\n\n# Calculate the integral of x^3 from 0 to 10\nresult = integrate_x_cubed(0, 10)\n\n# Print the result\nprint(result)\n```\n\nThis script defines a function `integrate_x_cubed` that takes the lower and upper limits of integration as arguments and returns the definite integral of x^3 using the power rule of integration. The script then calls this function with the limits 0 and 10 and prints the result.\n\nExecute the script `python integral.py`, you should get the result: `2500.0`.\n\nTERMINATE\n\n\n--------------------------------------------------------------------------------\n'})})]})}function d(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>r,a:()=>s});var o=i(67294);const t={},a=o.createContext(t);function s(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);