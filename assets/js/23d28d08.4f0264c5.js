"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4571],{96627:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>a});var c=s(85893),i=s(11151);const t={sidebar_label:"cosmos_db_cache",title:"cache.cosmos_db_cache"},o=void 0,r={id:"reference/cache/cosmos_db_cache",title:"cache.cosmos_db_cache",description:"CosmosDBCache",source:"@site/docs/reference/cache/cosmos_db_cache.md",sourceDirName:"reference/cache",slug:"/reference/cache/cosmos_db_cache",permalink:"/autogen/docs/reference/cache/cosmos_db_cache",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/reference/cache/cosmos_db_cache.md",tags:[],version:"current",frontMatter:{sidebar_label:"cosmos_db_cache",title:"cache.cosmos_db_cache"},sidebar:"referenceSideBar",previous:{title:"cache_factory",permalink:"/autogen/docs/reference/cache/cache_factory"},next:{title:"disk_cache",permalink:"/autogen/docs/reference/cache/disk_cache"}},l={},a=[{value:"CosmosDBCache",id:"cosmosdbcache",level:2},{value:"__init__",id:"__init__",level:3},{value:"create_cache",id:"create_cache",level:3},{value:"get",id:"get",level:3},{value:"set",id:"set",level:3},{value:"close",id:"close",level:3},{value:"__enter__",id:"__enter__",level:3},{value:"__exit__",id:"__exit__",level:3}];function d(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"cosmosdbcache",children:"CosmosDBCache"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:"class CosmosDBCache(AbstractCache)\n"})}),"\n",(0,c.jsx)(n.p,{children:"Synchronous implementation of AbstractCache using Azure Cosmos DB NoSQL API."}),"\n",(0,c.jsx)(n.p,{children:"This class provides a concrete implementation of the AbstractCache\ninterface using Azure Cosmos DB for caching data, with synchronous operations."}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Attributes"}),":"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"seed"})," ",(0,c.jsx)(n.em,{children:"Union[str, int]"})," - A seed or namespace used as a partition key."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"client"})," ",(0,c.jsx)(n.em,{children:"CosmosClient"})," - The Cosmos DB client used for caching."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"container"})," - The container instance used for caching."]}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"__init__",children:"__init__"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:"def __init__(seed: Union[str, int], cosmosdb_config: CosmosDBConfig)\n"})}),"\n",(0,c.jsx)(n.p,{children:"Initialize the CosmosDBCache instance."}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"seed"})," ",(0,c.jsx)(n.em,{children:"Union[str, int]"})," - A seed or namespace for the cache, used as a partition key."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"connection_string"})," ",(0,c.jsx)(n.em,{children:"str"})," - The connection string for the Cosmos DB account."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"container_id"})," ",(0,c.jsx)(n.em,{children:"str"})," - The container ID to be used for caching."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"client"})," ",(0,c.jsx)(n.em,{children:"Optional[CosmosClient]"})," - An existing CosmosClient instance to be used for caching."]}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"create_cache",children:"create_cache"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:"@classmethod\ndef create_cache(cls, seed: Union[str, int], cosmosdb_config: CosmosDBConfig)\n"})}),"\n",(0,c.jsx)(n.p,{children:"Factory method to create a CosmosDBCache instance based on the provided configuration.\nThis method decides whether to use an existing CosmosClient or create a new one."}),"\n",(0,c.jsx)(n.h3,{id:"get",children:"get"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:"def get(key: str, default: Optional[Any] = None) -> Optional[Any]\n"})}),"\n",(0,c.jsx)(n.p,{children:"Retrieve an item from the Cosmos DB cache."}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"key"})," ",(0,c.jsx)(n.em,{children:"str"})," - The key identifying the item in the cache."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"default"})," ",(0,c.jsx)(n.em,{children:"optional"})," - The default value to return if the key is not found."]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,c.jsx)(n.p,{children:"The deserialized value associated with the key if found, else the default value."}),"\n",(0,c.jsx)(n.h3,{id:"set",children:"set"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:"def set(key: str, value: Any) -> None\n"})}),"\n",(0,c.jsx)(n.p,{children:"Set an item in the Cosmos DB cache."}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"key"})," ",(0,c.jsx)(n.em,{children:"str"})," - The key under which the item is to be stored."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"value"})," - The value to be stored in the cache."]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Notes"}),":"]}),"\n",(0,c.jsx)(n.p,{children:"The value is serialized using pickle before being stored."}),"\n",(0,c.jsx)(n.h3,{id:"close",children:"close"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:"def close() -> None\n"})}),"\n",(0,c.jsx)(n.p,{children:"Close the Cosmos DB client."}),"\n",(0,c.jsx)(n.p,{children:"Perform any necessary cleanup, such as closing network connections."}),"\n",(0,c.jsx)(n.h3,{id:"__enter__",children:"__enter__"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:"def __enter__()\n"})}),"\n",(0,c.jsx)(n.p,{children:"Context management entry."}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"self"})," - The instance itself."]}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"__exit__",children:"__exit__"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:"def __exit__(exc_type: Optional[type], exc_value: Optional[Exception],\n             traceback: Optional[Any]) -> None\n"})}),"\n",(0,c.jsx)(n.p,{children:"Context management exit."}),"\n",(0,c.jsx)(n.p,{children:"Perform cleanup actions such as closing the Cosmos DB client."})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>r,a:()=>o});var c=s(67294);const i={},t=c.createContext(i);function o(e){const n=c.useContext(t);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),c.createElement(t.Provider,{value:n},e.children)}}}]);