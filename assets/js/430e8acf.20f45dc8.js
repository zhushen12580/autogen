"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[455],{25551:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=t(85893),o=t(11151);const r={custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_groupchat_RAG.ipynb",description:"Implement and manage a multi-agent chat system using AutoGen, where AI assistants retrieve information, generate code, and interact collaboratively to solve complex tasks, especially in areas not covered by their training data.",source_notebook:"/notebook/agentchat_groupchat_RAG.ipynb",tags:["group chat","orchestration","RAG"],title:"Group Chat with Retrieval Augmented Generation"},s="Group Chat with Retrieval Augmented Generation",i={id:"notebooks/agentchat_groupchat_RAG",title:"Group Chat with Retrieval Augmented Generation",description:"Implement and manage a multi-agent chat system using AutoGen, where AI assistants retrieve information, generate code, and interact collaboratively to solve complex tasks, especially in areas not covered by their training data.",source:"@site/docs/notebooks/agentchat_groupchat_RAG.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_groupchat_RAG",permalink:"/autogen/docs/notebooks/agentchat_groupchat_RAG",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_groupchat_RAG.ipynb",tags:[{label:"group chat",permalink:"/autogen/docs/tags/group-chat"},{label:"orchestration",permalink:"/autogen/docs/tags/orchestration"},{label:"RAG",permalink:"/autogen/docs/tags/rag"}],version:"current",frontMatter:{custom_edit_url:"https://github.com/microsoft/autogen/edit/main/notebook/agentchat_groupchat_RAG.ipynb",description:"Implement and manage a multi-agent chat system using AutoGen, where AI assistants retrieve information, generate code, and interact collaboratively to solve complex tasks, especially in areas not covered by their training data.",source_notebook:"/notebook/agentchat_groupchat_RAG.ipynb",tags:["group chat","orchestration","RAG"],title:"Group Chat with Retrieval Augmented Generation"},sidebar:"notebooksSidebar",previous:{title:"Group Chat",permalink:"/autogen/docs/notebooks/agentchat_groupchat"},next:{title:"Group Chat with Customized Speaker Selection Method",permalink:"/autogen/docs/notebooks/agentchat_groupchat_customized"}},l={},p=[{value:"Set your API Endpoint",id:"set-your-api-endpoint",level:2},{value:"Construct Agents",id:"construct-agents",level:2},{value:"Start Chat",id:"start-chat",level:2},{value:"UserProxyAgent doesn\u2019t get the correct code",id:"userproxyagent-doesnt-get-the-correct-code",level:3},{value:"RetrieveUserProxyAgent get the correct code",id:"retrieveuserproxyagent-get-the-correct-code",level:3},{value:"Call RetrieveUserProxyAgent while init chat with another user proxy agent",id:"call-retrieveuserproxyagent-while-init-chat-with-another-user-proxy-agent",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"group-chat-with-retrieval-augmented-generation",children:"Group Chat with Retrieval Augmented Generation"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/notebook/agentchat_groupchat_RAG.ipynb",children:(0,a.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,a.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_groupchat_RAG.ipynb",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,a.jsxs)(n.p,{children:["AutoGen supports conversable agents powered by LLMs, tools, or humans,\nperforming tasks collectively via automated chat. This framework allows\ntool use and human participation through multi-agent conversation.\nPlease find documentation about this feature\n",(0,a.jsx)(n.a,{href:"https://microsoft.github.io/autogen/docs/Use-Cases/agent_chat",children:"here"}),"."]}),"\n",(0,a.jsxs)(n.admonition,{title:"Requirements",type:"info",children:[(0,a.jsx)(n.p,{children:"Some extra dependencies are needed for this notebook, which can be installed via pip:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install pyautogen[retrievechat]\n"})}),(0,a.jsxs)(n.p,{children:["For more information, please refer to the ",(0,a.jsx)(n.a,{href:"/docs/installation/",children:"installation guide"}),"."]})]}),"\n",(0,a.jsx)(n.h2,{id:"set-your-api-endpoint",children:"Set your API Endpoint"}),"\n",(0,a.jsxs)(n.p,{children:["The\n",(0,a.jsx)(n.a,{href:"https://microsoft.github.io/autogen/docs/reference/oai/openai_utils#config_list_from_json",children:(0,a.jsx)(n.code,{children:"config_list_from_json"})}),"\nfunction loads a list of configurations from an environment variable or\na json file."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import chromadb\nfrom typing_extensions import Annotated\n\nimport autogen\nfrom autogen import AssistantAgent\nfrom autogen.agentchat.contrib.retrieve_user_proxy_agent import RetrieveUserProxyAgent\n\nconfig_list = autogen.config_list_from_json("OAI_CONFIG_LIST")\n\nprint("LLM models: ", [config_list[i]["model"] for i in range(len(config_list))])\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"LLM models:  ['gpt-35-turbo', 'gpt4-1106-preview', 'gpt-4o']\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Learn more about configuring LLMs for agents ",(0,a.jsx)(n.a,{href:"/docs/topics/llm_configuration",children:"here"}),"."]})}),"\n",(0,a.jsx)(n.h2,{id:"construct-agents",children:"Construct Agents"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def termination_msg(x):\n    return isinstance(x, dict) and "TERMINATE" == str(x.get("content", ""))[-9:].upper()\n\n\nllm_config = {"config_list": config_list, "timeout": 60, "temperature": 0.8, "seed": 1234}\n\nboss = autogen.UserProxyAgent(\n    name="Boss",\n    is_termination_msg=termination_msg,\n    human_input_mode="NEVER",\n    code_execution_config=False,  # we don\'t want to execute code in this case.\n    default_auto_reply="Reply `TERMINATE` if the task is done.",\n    description="The boss who ask questions and give tasks.",\n)\n\nboss_aid = RetrieveUserProxyAgent(\n    name="Boss_Assistant",\n    is_termination_msg=termination_msg,\n    human_input_mode="NEVER",\n    default_auto_reply="Reply `TERMINATE` if the task is done.",\n    max_consecutive_auto_reply=3,\n    retrieve_config={\n        "task": "code",\n        "docs_path": "https://raw.githubusercontent.com/microsoft/FLAML/main/website/docs/Examples/Integrate%20-%20Spark.md",\n        "chunk_token_size": 1000,\n        "model": config_list[0]["model"],\n        "collection_name": "groupchat",\n        "get_or_create": True,\n    },\n    code_execution_config=False,  # we don\'t want to execute code in this case.\n    description="Assistant who has extra content retrieval power for solving difficult problems.",\n)\n\ncoder = AssistantAgent(\n    name="Senior_Python_Engineer",\n    is_termination_msg=termination_msg,\n    system_message="You are a senior python engineer, you provide python code to answer questions. Reply `TERMINATE` in the end when everything is done.",\n    llm_config=llm_config,\n    description="Senior Python Engineer who can write code to solve problems and answer questions.",\n)\n\npm = autogen.AssistantAgent(\n    name="Product_Manager",\n    is_termination_msg=termination_msg,\n    system_message="You are a product manager. Reply `TERMINATE` in the end when everything is done.",\n    llm_config=llm_config,\n    description="Product Manager who can design and plan the project.",\n)\n\nreviewer = autogen.AssistantAgent(\n    name="Code_Reviewer",\n    is_termination_msg=termination_msg,\n    system_message="You are a code reviewer. Reply `TERMINATE` in the end when everything is done.",\n    llm_config=llm_config,\n    description="Code Reviewer who can review the code.",\n)\n\nPROBLEM = "How to use spark for parallel training in FLAML? Give me sample code."\n\n\ndef _reset_agents():\n    boss.reset()\n    boss_aid.reset()\n    coder.reset()\n    pm.reset()\n    reviewer.reset()\n\n\ndef rag_chat():\n    _reset_agents()\n    groupchat = autogen.GroupChat(\n        agents=[boss_aid, pm, coder, reviewer], messages=[], max_round=12, speaker_selection_method="round_robin"\n    )\n    manager = autogen.GroupChatManager(groupchat=groupchat, llm_config=llm_config)\n\n    # Start chatting with boss_aid as this is the user proxy agent.\n    boss_aid.initiate_chat(\n        manager,\n        message=boss_aid.message_generator,\n        problem=PROBLEM,\n        n_results=3,\n    )\n\n\ndef norag_chat():\n    _reset_agents()\n    groupchat = autogen.GroupChat(\n        agents=[boss, pm, coder, reviewer],\n        messages=[],\n        max_round=12,\n        speaker_selection_method="auto",\n        allow_repeat_speaker=False,\n    )\n    manager = autogen.GroupChatManager(groupchat=groupchat, llm_config=llm_config)\n\n    # Start chatting with the boss as this is the user proxy agent.\n    boss.initiate_chat(\n        manager,\n        message=PROBLEM,\n    )\n\n\ndef call_rag_chat():\n    _reset_agents()\n\n    # In this case, we will have multiple user proxy agents and we don\'t initiate the chat\n    # with RAG user proxy agent.\n    # In order to use RAG user proxy agent, we need to wrap RAG agents in a function and call\n    # it from other agents.\n    def retrieve_content(\n        message: Annotated[\n            str,\n            "Refined message which keeps the original meaning and can be used to retrieve content for code generation and question answering.",\n        ],\n        n_results: Annotated[int, "number of results"] = 3,\n    ) -> str:\n        boss_aid.n_results = n_results  # Set the number of results to be retrieved.\n        _context = {"problem": message, "n_results": n_results}\n        ret_msg = boss_aid.message_generator(boss_aid, None, _context)\n        return ret_msg or message\n\n    boss_aid.human_input_mode = "NEVER"  # Disable human input for boss_aid since it only retrieves content.\n\n    for caller in [pm, coder, reviewer]:\n        d_retrieve_content = caller.register_for_llm(\n            description="retrieve content for code generation and question answering.", api_style="function"\n        )(retrieve_content)\n\n    for executor in [boss, pm]:\n        executor.register_for_execution()(d_retrieve_content)\n\n    groupchat = autogen.GroupChat(\n        agents=[boss, pm, coder, reviewer],\n        messages=[],\n        max_round=12,\n        speaker_selection_method="round_robin",\n        allow_repeat_speaker=False,\n    )\n\n    manager = autogen.GroupChatManager(groupchat=groupchat, llm_config=llm_config)\n\n    # Start chatting with the boss as this is the user proxy agent.\n    boss.initiate_chat(\n        manager,\n        message=PROBLEM,\n    )\n'})}),"\n",(0,a.jsx)(n.h2,{id:"start-chat",children:"Start Chat"}),"\n",(0,a.jsx)(n.h3,{id:"userproxyagent-doesnt-get-the-correct-code",children:"UserProxyAgent doesn\u2019t get the correct code"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://github.com/microsoft/FLAML",children:"FLAML"})," was open sourced in 2020, so\nChatGPT is familiar with it. However, Spark-related APIs were added in\n2022, so they were not in ChatGPT\u2019s training data. As a result, we end\nup with invalid code."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"norag_chat()\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'Boss (to chat_manager):\n\nHow to use spark for parallel training in FLAML? Give me sample code.\n\n--------------------------------------------------------------------------------\nHow to use spark for parallel training in FLAML? Give me sample code.\n\n--------------------------------------------------------------------------------\n\nNext speaker: Senior_Python_Engineer\n\nSenior_Python_Engineer (to chat_manager):\n\nTo use Spark for parallel training in FLAML, you need to install `pyspark` package and set up a Spark cluster. Here\'s some sample code for using Spark in FLAML:\n\n```python\nfrom flaml import AutoML\nfrom pyspark.sql import SparkSession\n\n# create a SparkSession\nspark = SparkSession.builder.appName("FLAML-Spark").getOrCreate()\n\n# create a FLAML AutoML object with Spark backend\nautoml = AutoML()\n\n# load data from Spark DataFrame\ndata = spark.read.format("csv").option("header", "true").load("data.csv")\n\n# specify the target column and task type\nsettings = {\n    "time_budget": 60, # time budget in seconds\n    "metric": \'accuracy\',\n    "task": \'classification\',\n}\n\n# train and validate models in parallel using Spark\nbest_model = automl.fit(data, **settings)\n\n# print the best model and its metadata\nprint(automl.model_name)\nprint(automl.best_model)\nprint(automl.best_config)\n\n# stop the SparkSession\nspark.stop()\n\n# terminate the code execution\nTERMINATE\n```\n\nNote that this is just a sample code, you may need to modify it to fit your specific use case.\n\n--------------------------------------------------------------------------------\n\nNext speaker: Code_Reviewer\n\nCode_Reviewer (to chat_manager):\n\n\n\n--------------------------------------------------------------------------------\n\nNext speaker: Product_Manager\n\nProduct_Manager (to chat_manager):\n\nDo you have any questions related to the code sample?\n\n--------------------------------------------------------------------------------\n\nNext speaker: Senior_Python_Engineer\n\nSenior_Python_Engineer (to chat_manager):\n\nNo, I don\'t have any questions related to the code sample.\n\n--------------------------------------------------------------------------------\n\nNext speaker: Product_Manager\n\nProduct_Manager (to chat_manager):\n\nGreat, let me know if you need any further assistance.\n\n--------------------------------------------------------------------------------\n\nNext speaker: Senior_Python_Engineer\n\nSenior_Python_Engineer (to chat_manager):\n\nSure, will do. Thank you!\n\n--------------------------------------------------------------------------------\n\nNext speaker: Product_Manager\n\nProduct_Manager (to chat_manager):\n\nYou\'re welcome! Have a great day ahead!\n\n--------------------------------------------------------------------------------\n\nNext speaker: Senior_Python_Engineer\n\nSenior_Python_Engineer (to chat_manager):\n\nYou too, have a great day ahead!\n\n--------------------------------------------------------------------------------\n\nNext speaker: Product_Manager\n\nProduct_Manager (to chat_manager):\n\nThank you! Goodbye!\n\n--------------------------------------------------------------------------------\n\nNext speaker: Senior_Python_Engineer\n\nSenior_Python_Engineer (to chat_manager):\n\nGoodbye!\n\n--------------------------------------------------------------------------------\n\nNext speaker: Code_Reviewer\n\nCode_Reviewer (to chat_manager):\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n'})}),"\n",(0,a.jsx)(n.h3,{id:"retrieveuserproxyagent-get-the-correct-code",children:"RetrieveUserProxyAgent get the correct code"}),"\n",(0,a.jsx)(n.p,{children:"Since RetrieveUserProxyAgent can perform retrieval-augmented generation\nbased on the given documentation file, ChatGPT can generate the correct\ncode for us!"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"rag_chat()\n# type exit to terminate the chat\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'Trying to create collection.\nVectorDB returns doc_ids:  [[\'bdfbc921\', \'b2c1ec51\', \'0e57e70f\']]\nAdding content of doc bdfbc921 to context.\nAdding content of doc b2c1ec51 to context.\nBoss_Assistant (to chat_manager):\n\nYou\'re a retrieve augmented coding assistant. You answer user\'s questions based on your own knowledge and the\ncontext provided by the user.\nIf you can\'t answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nFor code generation, you must obey the following rules:\nRule 1. You MUST NOT install any packages because all the packages needed are already installed.\nRule 2. You must follow the formats below to write your code:\n```language\n# your code\n```\n\nUser\'s question is: How to use spark for parallel training in FLAML? Give me sample code.\n\nContext is: # Integrate - Spark\n\nFLAML has integrated Spark for distributed training. There are two main aspects of integration with Spark:\n\n- Use Spark ML estimators for AutoML.\n- Use Spark to run training in parallel spark jobs.\n\n## Spark ML Estimators\n\nFLAML integrates estimators based on Spark ML models. These models are trained in parallel using Spark, so we called them Spark estimators. To use these models, you first need to organize your data in the required format.\n\n### Data\n\nFor Spark estimators, AutoML only consumes Spark data. FLAML provides a convenient function `to_pandas_on_spark` in the `flaml.automl.spark.utils` module to convert your data into a pandas-on-spark (`pyspark.pandas`) dataframe/series, which Spark estimators require.\n\nThis utility function takes data in the form of a `pandas.Dataframe` or `pyspark.sql.Dataframe` and converts it into a pandas-on-spark dataframe. It also takes `pandas.Series` or `pyspark.sql.Dataframe` and converts it into a [pandas-on-spark](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/index.html) series. If you pass in a `pyspark.pandas.Dataframe`, it will not make any changes.\n\nThis function also accepts optional arguments `index_col` and `default_index_type`.\n\n- `index_col` is the column name to use as the index, default is None.\n- `default_index_type` is the default index type, default is "distributed-sequence". More info about default index type could be found on Spark official [documentation](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/options.html#default-index-type)\n\nHere is an example code snippet for Spark Data:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n\n# Creating a dictionary\ndata = {\n    "Square_Feet": [800, 1200, 1800, 1500, 850],\n    "Age_Years": [20, 15, 10, 7, 25],\n    "Price": [100000, 200000, 300000, 240000, 120000],\n}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\nTo use Spark ML models you need to format your data appropriately. Specifically, use [`VectorAssembler`](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.feature.VectorAssembler.html) to merge all feature columns into a single vector column.\n\nHere is an example of how to use it:\n\n```python\nfrom pyspark.ml.feature import VectorAssembler\n\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n```\n\nLater in conducting the experiment, use your pandas-on-spark data like non-spark data and pass them using `X_train, y_train` or `dataframe, label`.\n\n### Estimators\n\n#### Model List\n\n- `lgbm_spark`: The class for fine-tuning Spark version LightGBM models, using [SynapseML](https://microsoft.github.io/SynapseML/docs/features/lightgbm/about/) API.\n\n#### Usage\n\nFirst, prepare your data in the required format as described in the previous section.\n\nBy including the models you intend to try in the `estimators_list` argument to `flaml.automl`, FLAML will start trying configurations for these models. If your input is Spark data, FLAML will also use estimators with the `_spark` postfix by default, even if you haven\'t specified them.\n\nHere is an example code snippet using SparkML models in AutoML:\n\n```python\nimport flaml\n\n# prepare your data in pandas-on-spark format as we previously mentioned\n\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],  # this setting is optional\n    "task": "regression",\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings,\n)\n```\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb)\n\n## Parallel Spark Jobs\n\nYou can activate Spark as the parallel backend during parallel tuning in both [AutoML](/docs/Use-Cases/Task-Oriented-AutoML#parallel-tuning) and [Hyperparameter Tuning](/docs/Use-Cases/Tune-User-Defined-Function#parallel-tuning), by setting the `use_spark` to `true`. FLAML will dispatch your job to the distributed Spark backend using [`joblib-spark`](https://github.com/joblib/joblib-spark).\n\nPlease note that you should not set `use_spark` to `true` when applying AutoML and Tuning for Spark Data. This is because only SparkML models will be used for Spark Data in AutoML and Tuning. As SparkML models run in parallel, there is no need to distribute them with `use_spark` again.\n\nAll the Spark-related arguments are stated below. These arguments are available in both Hyperparameter Tuning and AutoML:\n\n- `use_spark`: boolean, default=False | Whether to use spark to run the training in parallel spark jobs. This can be used to accelerate training on large models and large datasets, but will incur more overhead in time and thus slow down training in some cases. GPU training is not supported yet when use_spark is True. For Spark clusters, by default, we will launch one trial per executor. However, sometimes we want to launch more trials than the number of executors (e.g., local mode). In this case, we can set the environment variable `FLAML_MAX_CONCURRENT` to override the detected `num_executors`. The final number of concurrent trials will be the minimum of `n_concurrent_trials` and `num_executors`.\n- `n_concurrent_trials`: int, default=1 | The number of concurrent trials. When n_concurrent_trials > 1, FLAML performes parallel tuning.\n- `force_cancel`: boolean, default=False | Whether to forcely cancel Spark jobs if the search time exceeded the time budget. Spark jobs include parallel tuning jobs and Spark-based model training jobs.\n\nAn example code snippet for using parallel Spark jobs:\n\n```python\nimport flaml\n\nautoml_experiment = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True,  # Activating the force_cancel option can immediately halt Spark jobs once they exceed the allocated time_budget.\n}\n\nautoml.fit(\n    dataframe=dataframe,\n    label=label,\n    **automl_settings,\n)\n```\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb)\n# Integrate - Spark\n\nFLAML has integrated Spark for distributed training. There are two main aspects of integration with Spark:\n\n- Use Spark ML estimators for AutoML.\n- Use Spark to run training in parallel spark jobs.\n\n## Spark ML Estimators\n\nFLAML integrates estimators based on Spark ML models. These models are trained in parallel using Spark, so we called them Spark estimators. To use these models, you first need to organize your data in the required format.\n\n### Data\n\nFor Spark estimators, AutoML only consumes Spark data. FLAML provides a convenient function `to_pandas_on_spark` in the `flaml.automl.spark.utils` module to convert your data into a pandas-on-spark (`pyspark.pandas`) dataframe/series, which Spark estimators require.\n\nThis utility function takes data in the form of a `pandas.Dataframe` or `pyspark.sql.Dataframe` and converts it into a pandas-on-spark dataframe. It also takes `pandas.Series` or `pyspark.sql.Dataframe` and converts it into a [pandas-on-spark](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/index.html) series. If you pass in a `pyspark.pandas.Dataframe`, it will not make any changes.\n\nThis function also accepts optional arguments `index_col` and `default_index_type`.\n\n- `index_col` is the column name to use as the index, default is None.\n- `default_index_type` is the default index type, default is "distributed-sequence". More info about default index type could be found on Spark official [documentation](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/options.html#default-index-type)\n\nHere is an example code snippet for Spark Data:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n\n# Creating a dictionary\ndata = {\n    "Square_Feet": [800, 1200, 1800, 1500, 850],\n    "Age_Years": [20, 15, 10, 7, 25],\n    "Price": [100000, 200000, 300000, 240000, 120000],\n}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\nTo use Spark ML models you need to format your data appropriately. Specifically, use [`VectorAssembler`](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.feature.VectorAssembler.html) to merge all feature columns into a single vector column.\n\nHere is an example of how to use it:\n\n```python\nfrom pyspark.ml.feature import VectorAssembler\n\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n```\n\nLater in conducting the experiment, use your pandas-on-spark data like non-spark data and pass them using `X_train, y_train` or `dataframe, label`.\n\n### Estimators\n\n#### Model List\n\n- `lgbm_spark`: The class for fine-tuning Spark version LightGBM models, using [SynapseML](https://microsoft.github.io/SynapseML/docs/features/lightgbm/about/) API.\n\n#### Usage\n\nFirst, prepare your data in the required format as described in the previous section.\n\nBy including the models you intend to try in the `estimators_list` argument to `flaml.automl`, FLAML will start trying configurations for these models. If your input is Spark data, FLAML will also use estimators with the `_spark` postfix by default, even if you haven\'t specified them.\n\nHere is an example code snippet using SparkML models in AutoML:\n\n```python\nimport flaml\n\n# prepare your data in pandas-on-spark format as we previously mentioned\n\n\n\n--------------------------------------------------------------------------------\n\nNext speaker: Product_Manager\n\nAdding content of doc b2c1ec51 to context.\nBoss_Assistant (to chat_manager):\n\nYou\'re a retrieve augmented coding assistant. You answer user\'s questions based on your own knowledge and the\ncontext provided by the user.\nIf you can\'t answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nFor code generation, you must obey the following rules:\nRule 1. You MUST NOT install any packages because all the packages needed are already installed.\nRule 2. You must follow the formats below to write your code:\n```language\n# your code\n```\n\nUser\'s question is: How to use spark for parallel training in FLAML? Give me sample code.\n\nContext is: # Integrate - Spark\n\nFLAML has integrated Spark for distributed training. There are two main aspects of integration with Spark:\n\n- Use Spark ML estimators for AutoML.\n- Use Spark to run training in parallel spark jobs.\n\n## Spark ML Estimators\n\nFLAML integrates estimators based on Spark ML models. These models are trained in parallel using Spark, so we called them Spark estimators. To use these models, you first need to organize your data in the required format.\n\n### Data\n\nFor Spark estimators, AutoML only consumes Spark data. FLAML provides a convenient function `to_pandas_on_spark` in the `flaml.automl.spark.utils` module to convert your data into a pandas-on-spark (`pyspark.pandas`) dataframe/series, which Spark estimators require.\n\nThis utility function takes data in the form of a `pandas.Dataframe` or `pyspark.sql.Dataframe` and converts it into a pandas-on-spark dataframe. It also takes `pandas.Series` or `pyspark.sql.Dataframe` and converts it into a [pandas-on-spark](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/index.html) series. If you pass in a `pyspark.pandas.Dataframe`, it will not make any changes.\n\nThis function also accepts optional arguments `index_col` and `default_index_type`.\n\n- `index_col` is the column name to use as the index, default is None.\n- `default_index_type` is the default index type, default is "distributed-sequence". More info about default index type could be found on Spark official [documentation](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/options.html#default-index-type)\n\nHere is an example code snippet for Spark Data:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n\n# Creating a dictionary\ndata = {\n    "Square_Feet": [800, 1200, 1800, 1500, 850],\n    "Age_Years": [20, 15, 10, 7, 25],\n    "Price": [100000, 200000, 300000, 240000, 120000],\n}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\nTo use Spark ML models you need to format your data appropriately. Specifically, use [`VectorAssembler`](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.feature.VectorAssembler.html) to merge all feature columns into a single vector column.\n\nHere is an example of how to use it:\n\n```python\nfrom pyspark.ml.feature import VectorAssembler\n\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n```\n\nLater in conducting the experiment, use your pandas-on-spark data like non-spark data and pass them using `X_train, y_train` or `dataframe, label`.\n\n### Estimators\n\n#### Model List\n\n- `lgbm_spark`: The class for fine-tuning Spark version LightGBM models, using [SynapseML](https://microsoft.github.io/SynapseML/docs/features/lightgbm/about/) API.\n\n#### Usage\n\nFirst, prepare your data in the required format as described in the previous section.\n\nBy including the models you intend to try in the `estimators_list` argument to `flaml.automl`, FLAML will start trying configurations for these models. If your input is Spark data, FLAML will also use estimators with the `_spark` postfix by default, even if you haven\'t specified them.\n\nHere is an example code snippet using SparkML models in AutoML:\n\n```python\nimport flaml\n\n# prepare your data in pandas-on-spark format as we previously mentioned\n\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],  # this setting is optional\n    "task": "regression",\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings,\n)\n```\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb)\n\n## Parallel Spark Jobs\n\nYou can activate Spark as the parallel backend during parallel tuning in both [AutoML](/docs/Use-Cases/Task-Oriented-AutoML#parallel-tuning) and [Hyperparameter Tuning](/docs/Use-Cases/Tune-User-Defined-Function#parallel-tuning), by setting the `use_spark` to `true`. FLAML will dispatch your job to the distributed Spark backend using [`joblib-spark`](https://github.com/joblib/joblib-spark).\n\nPlease note that you should not set `use_spark` to `true` when applying AutoML and Tuning for Spark Data. This is because only SparkML models will be used for Spark Data in AutoML and Tuning. As SparkML models run in parallel, there is no need to distribute them with `use_spark` again.\n\nAll the Spark-related arguments are stated below. These arguments are available in both Hyperparameter Tuning and AutoML:\n\n- `use_spark`: boolean, default=False | Whether to use spark to run the training in parallel spark jobs. This can be used to accelerate training on large models and large datasets, but will incur more overhead in time and thus slow down training in some cases. GPU training is not supported yet when use_spark is True. For Spark clusters, by default, we will launch one trial per executor. However, sometimes we want to launch more trials than the number of executors (e.g., local mode). In this case, we can set the environment variable `FLAML_MAX_CONCURRENT` to override the detected `num_executors`. The final number of concurrent trials will be the minimum of `n_concurrent_trials` and `num_executors`.\n- `n_concurrent_trials`: int, default=1 | The number of concurrent trials. When n_concurrent_trials > 1, FLAML performes parallel tuning.\n- `force_cancel`: boolean, default=False | Whether to forcely cancel Spark jobs if the search time exceeded the time budget. Spark jobs include parallel tuning jobs and Spark-based model training jobs.\n\nAn example code snippet for using parallel Spark jobs:\n\n```python\nimport flaml\n\nautoml_experiment = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True,  # Activating the force_cancel option can immediately halt Spark jobs once they exceed the allocated time_budget.\n}\n\nautoml.fit(\n    dataframe=dataframe,\n    label=label,\n    **automl_settings,\n)\n```\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb)\n# Integrate - Spark\n\nFLAML has integrated Spark for distributed training. There are two main aspects of integration with Spark:\n\n- Use Spark ML estimators for AutoML.\n- Use Spark to run training in parallel spark jobs.\n\n## Spark ML Estimators\n\nFLAML integrates estimators based on Spark ML models. These models are trained in parallel using Spark, so we called them Spark estimators. To use these models, you first need to organize your data in the required format.\n\n### Data\n\nFor Spark estimators, AutoML only consumes Spark data. FLAML provides a convenient function `to_pandas_on_spark` in the `flaml.automl.spark.utils` module to convert your data into a pandas-on-spark (`pyspark.pandas`) dataframe/series, which Spark estimators require.\n\nThis utility function takes data in the form of a `pandas.Dataframe` or `pyspark.sql.Dataframe` and converts it into a pandas-on-spark dataframe. It also takes `pandas.Series` or `pyspark.sql.Dataframe` and converts it into a [pandas-on-spark](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/index.html) series. If you pass in a `pyspark.pandas.Dataframe`, it will not make any changes.\n\nThis function also accepts optional arguments `index_col` and `default_index_type`.\n\n- `index_col` is the column name to use as the index, default is None.\n- `default_index_type` is the default index type, default is "distributed-sequence". More info about default index type could be found on Spark official [documentation](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/options.html#default-index-type)\n\nHere is an example code snippet for Spark Data:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n\n# Creating a dictionary\ndata = {\n    "Square_Feet": [800, 1200, 1800, 1500, 850],\n    "Age_Years": [20, 15, 10, 7, 25],\n    "Price": [100000, 200000, 300000, 240000, 120000],\n}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\nTo use Spark ML models you need to format your data appropriately. Specifically, use [`VectorAssembler`](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.feature.VectorAssembler.html) to merge all feature columns into a single vector column.\n\nHere is an example of how to use it:\n\n```python\nfrom pyspark.ml.feature import VectorAssembler\n\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n```\n\nLater in conducting the experiment, use your pandas-on-spark data like non-spark data and pass them using `X_train, y_train` or `dataframe, label`.\n\n### Estimators\n\n#### Model List\n\n- `lgbm_spark`: The class for fine-tuning Spark version LightGBM models, using [SynapseML](https://microsoft.github.io/SynapseML/docs/features/lightgbm/about/) API.\n\n#### Usage\n\nFirst, prepare your data in the required format as described in the previous section.\n\nBy including the models you intend to try in the `estimators_list` argument to `flaml.automl`, FLAML will start trying configurations for these models. If your input is Spark data, FLAML will also use estimators with the `_spark` postfix by default, even if you haven\'t specified them.\n\nHere is an example code snippet using SparkML models in AutoML:\n\n```python\nimport flaml\n\n# prepare your data in pandas-on-spark format as we previously mentioned\n\n\n\n--------------------------------------------------------------------------------\n\nNext speaker: Product_Manager\n\nProduct_Manager (to chat_manager):\n\n```python\nfrom flaml import AutoML\n\n# Assuming psdf is the pandas-on-spark dataframe and label is the name of the target variable\n# Presuming that the data conversion and feature vectorization have been done as shown in the context\n\nautoml = AutoML()\n\nsettings = {\n    "time_budget": 120,  # for example, set the time budget to 2 minutes\n    "metric": "accuracy",  # assuming a classification problem, change to "r2" for regression\n    "estimator_list": ["lgbm_spark"],  # specify the Spark estimator\n    "task": "classification",  # assuming a classification problem, change to "regression" for regression\n    "n_concurrent_trials": 2,  # number of concurrent Spark jobs\n    "use_spark": True,  # enable distributed training using Spark\n}\n\nautoml.fit(dataframe=psdf, label=label, **settings)\n```\nPlease adjust the `metric`, `task`, and other settings according to your specific problem and requirements. This code snippet sets up FLAML with Spark for parallel training using the LightGBM Spark estimator, with two concurrent trials. Make sure your Spark environment is properly configured to run the distributed training.\n\n--------------------------------------------------------------------------------\n\nNext speaker: Senior_Python_Engineer\n\nSenior_Python_Engineer (to chat_manager):\n\n```python\nfrom flaml import AutoML\n\n# Assuming psdf is the pandas-on-spark dataframe and label is the name of the target variable\n# Presuming that the data conversion and feature vectorization have been done as shown in the context\n\nautoml = AutoML()\n\nsettings = {\n    "time_budget": 120,  # for example, set the time budget to 2 minutes\n    "metric": "accuracy",  # assuming a classification problem, change to "r2" for regression\n    "estimator_list": ["lgbm_spark"],  # specify the Spark estimator\n    "task": "classification",  # assuming a classification problem, change to "regression" for regression\n    "n_concurrent_trials": 2,  # number of concurrent Spark jobs\n    "use_spark": True,  # enable distributed training using Spark\n}\n\nautoml.fit(dataframe=psdf, label=label, **settings)\n```\nPlease adjust the `metric`, `task`, and other settings according to your specific problem and requirements. This code snippet sets up FLAML with Spark for parallel training using the LightGBM Spark estimator, with two concurrent trials. Make sure your Spark environment is properly configured to run the distributed training.\n\n--------------------------------------------------------------------------------\n\nNext speaker: Code_Reviewer\n\nCode_Reviewer (to chat_manager):\n\nThe provided code snippet is mostly correct and follows the guidelines provided in the context. However, there is one minor issue: if we are using the pandas-on-spark DataFrame `psdf`, the `fit` method should be called with `dataframe` and `label` arguments, not `X_train` and `y_train`.\n\nThis is because, with FLAML and Spark integration, the `fit` method expects the entire data as a single pandas-on-spark DataFrame along with the name of the target variable as `label`, rather than being provided with separate feature and target data as it would expect with standard pandas DataFrames.\n\nHere\'s the correct code snippet reflecting this:\n\n```python\nfrom flaml import AutoML\n\n# Assuming psdf is the pandas-on-spark dataframe and label is the name of the target variable\n# Presuming that the data conversion and feature vectorization have been done as shown in the context\n\nautoml = AutoML()\n\nsettings = {\n    "time_budget": 120,  # for example, set the time budget to 2 minutes\n    "metric": "accuracy",  # assuming a classification problem, change to "r2" for regression\n    "estimator_list": ["lgbm_spark"],  # specify the Spark estimator\n    "task": "classification",  # assuming a classification problem, change to "regression" for regression\n    "n_concurrent_trials": 2,  # number of concurrent Spark jobs\n    "use_spark": True,  # enable distributed training using Spark\n}\n\n# Use dataframe and label parameters to fit the model\nautoml.fit(dataframe=psdf, label=label, **settings)\n```\n\nPlease ensure that your Spark cluster is correctly configured to support distributed training, and adjust the `metric`, `task`, and other settings as needed for your specific use case.\n\n--------------------------------------------------------------------------------\n\nNext speaker: Boss_Assistant\n\nBoss_Assistant (to chat_manager):\n\nReply `TERMINATE` if the task is done.\n\n--------------------------------------------------------------------------------\n\nNext speaker: Product_Manager\n\nProduct_Manager (to chat_manager):\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"2024-08-14 06:59:09,583 - autogen.agentchat.contrib.retrieve_user_proxy_agent - INFO - Use the existing collection `groupchat`.\n2024-08-14 06:59:09,902 - autogen.agentchat.contrib.retrieve_user_proxy_agent - INFO - Found 2 chunks.\n2024-08-14 06:59:09,912 - autogen.agentchat.contrib.vectordb.chromadb - INFO - No content embedding is provided. Will use the VectorDB's embedding function to generate the content embedding.\n"})}),"\n",(0,a.jsx)(n.h3,{id:"call-retrieveuserproxyagent-while-init-chat-with-another-user-proxy-agent",children:"Call RetrieveUserProxyAgent while init chat with another user proxy agent"}),"\n",(0,a.jsx)(n.p,{children:"Sometimes, there might be a need to use RetrieveUserProxyAgent in group\nchat without initializing the chat with it. In such scenarios, it\nbecomes essential to create a function that wraps the RAG agents and\nallows them to be called from other agents."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"call_rag_chat()\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:'Boss (to chat_manager):\n\nHow to use spark for parallel training in FLAML? Give me sample code.\n\n--------------------------------------------------------------------------------\n\nNext speaker: Product_Manager\n\nProduct_Manager (to chat_manager):\n\n***** Suggested function call: retrieve_content *****\nArguments: \n{"message":"How to use spark for parallel training in FLAML? Give me sample code.","n_results":3}\n*****************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: Boss\n\n\n>>>>>>>> EXECUTING FUNCTION retrieve_content...\nTrying to create collection.\nVectorDB returns doc_ids:  [[\'bdfbc921\', \'b2c1ec51\', \'0e57e70f\']]\nAdding content of doc bdfbc921 to context.\nAdding content of doc b2c1ec51 to context.\nAdding content of doc 0e57e70f to context.\nBoss (to chat_manager):\n\n***** Response from calling function (retrieve_content) *****\nYou\'re a retrieve augmented coding assistant. You answer user\'s questions based on your own knowledge and the\ncontext provided by the user.\nIf you can\'t answer the question with or without the current context, you should reply exactly `UPDATE CONTEXT`.\nFor code generation, you must obey the following rules:\nRule 1. You MUST NOT install any packages because all the packages needed are already installed.\nRule 2. You must follow the formats below to write your code:\n```language\n# your code\n```\n\nUser\'s question is: How to use spark for parallel training in FLAML? Give me sample code.\n\nContext is: # Integrate - Spark\n\nFLAML has integrated Spark for distributed training. There are two main aspects of integration with Spark:\n\n- Use Spark ML estimators for AutoML.\n- Use Spark to run training in parallel spark jobs.\n\n## Spark ML Estimators\n\nFLAML integrates estimators based on Spark ML models. These models are trained in parallel using Spark, so we called them Spark estimators. To use these models, you first need to organize your data in the required format.\n\n### Data\n\nFor Spark estimators, AutoML only consumes Spark data. FLAML provides a convenient function `to_pandas_on_spark` in the `flaml.automl.spark.utils` module to convert your data into a pandas-on-spark (`pyspark.pandas`) dataframe/series, which Spark estimators require.\n\nThis utility function takes data in the form of a `pandas.Dataframe` or `pyspark.sql.Dataframe` and converts it into a pandas-on-spark dataframe. It also takes `pandas.Series` or `pyspark.sql.Dataframe` and converts it into a [pandas-on-spark](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/index.html) series. If you pass in a `pyspark.pandas.Dataframe`, it will not make any changes.\n\nThis function also accepts optional arguments `index_col` and `default_index_type`.\n\n- `index_col` is the column name to use as the index, default is None.\n- `default_index_type` is the default index type, default is "distributed-sequence". More info about default index type could be found on Spark official [documentation](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/options.html#default-index-type)\n\nHere is an example code snippet for Spark Data:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n\n# Creating a dictionary\ndata = {\n    "Square_Feet": [800, 1200, 1800, 1500, 850],\n    "Age_Years": [20, 15, 10, 7, 25],\n    "Price": [100000, 200000, 300000, 240000, 120000],\n}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\nTo use Spark ML models you need to format your data appropriately. Specifically, use [`VectorAssembler`](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.feature.VectorAssembler.html) to merge all feature columns into a single vector column.\n\nHere is an example of how to use it:\n\n```python\nfrom pyspark.ml.feature import VectorAssembler\n\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n```\n\nLater in conducting the experiment, use your pandas-on-spark data like non-spark data and pass them using `X_train, y_train` or `dataframe, label`.\n\n### Estimators\n\n#### Model List\n\n- `lgbm_spark`: The class for fine-tuning Spark version LightGBM models, using [SynapseML](https://microsoft.github.io/SynapseML/docs/features/lightgbm/about/) API.\n\n#### Usage\n\nFirst, prepare your data in the required format as described in the previous section.\n\nBy including the models you intend to try in the `estimators_list` argument to `flaml.automl`, FLAML will start trying configurations for these models. If your input is Spark data, FLAML will also use estimators with the `_spark` postfix by default, even if you haven\'t specified them.\n\nHere is an example code snippet using SparkML models in AutoML:\n\n```python\nimport flaml\n\n# prepare your data in pandas-on-spark format as we previously mentioned\n\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],  # this setting is optional\n    "task": "regression",\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings,\n)\n```\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb)\n\n## Parallel Spark Jobs\n\nYou can activate Spark as the parallel backend during parallel tuning in both [AutoML](/docs/Use-Cases/Task-Oriented-AutoML#parallel-tuning) and [Hyperparameter Tuning](/docs/Use-Cases/Tune-User-Defined-Function#parallel-tuning), by setting the `use_spark` to `true`. FLAML will dispatch your job to the distributed Spark backend using [`joblib-spark`](https://github.com/joblib/joblib-spark).\n\nPlease note that you should not set `use_spark` to `true` when applying AutoML and Tuning for Spark Data. This is because only SparkML models will be used for Spark Data in AutoML and Tuning. As SparkML models run in parallel, there is no need to distribute them with `use_spark` again.\n\nAll the Spark-related arguments are stated below. These arguments are available in both Hyperparameter Tuning and AutoML:\n\n- `use_spark`: boolean, default=False | Whether to use spark to run the training in parallel spark jobs. This can be used to accelerate training on large models and large datasets, but will incur more overhead in time and thus slow down training in some cases. GPU training is not supported yet when use_spark is True. For Spark clusters, by default, we will launch one trial per executor. However, sometimes we want to launch more trials than the number of executors (e.g., local mode). In this case, we can set the environment variable `FLAML_MAX_CONCURRENT` to override the detected `num_executors`. The final number of concurrent trials will be the minimum of `n_concurrent_trials` and `num_executors`.\n- `n_concurrent_trials`: int, default=1 | The number of concurrent trials. When n_concurrent_trials > 1, FLAML performes parallel tuning.\n- `force_cancel`: boolean, default=False | Whether to forcely cancel Spark jobs if the search time exceeded the time budget. Spark jobs include parallel tuning jobs and Spark-based model training jobs.\n\nAn example code snippet for using parallel Spark jobs:\n\n```python\nimport flaml\n\nautoml_experiment = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True,  # Activating the force_cancel option can immediately halt Spark jobs once they exceed the allocated time_budget.\n}\n\nautoml.fit(\n    dataframe=dataframe,\n    label=label,\n    **automl_settings,\n)\n```\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb)\n# Integrate - Spark\n\nFLAML has integrated Spark for distributed training. There are two main aspects of integration with Spark:\n\n- Use Spark ML estimators for AutoML.\n- Use Spark to run training in parallel spark jobs.\n\n## Spark ML Estimators\n\nFLAML integrates estimators based on Spark ML models. These models are trained in parallel using Spark, so we called them Spark estimators. To use these models, you first need to organize your data in the required format.\n\n### Data\n\nFor Spark estimators, AutoML only consumes Spark data. FLAML provides a convenient function `to_pandas_on_spark` in the `flaml.automl.spark.utils` module to convert your data into a pandas-on-spark (`pyspark.pandas`) dataframe/series, which Spark estimators require.\n\nThis utility function takes data in the form of a `pandas.Dataframe` or `pyspark.sql.Dataframe` and converts it into a pandas-on-spark dataframe. It also takes `pandas.Series` or `pyspark.sql.Dataframe` and converts it into a [pandas-on-spark](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/index.html) series. If you pass in a `pyspark.pandas.Dataframe`, it will not make any changes.\n\nThis function also accepts optional arguments `index_col` and `default_index_type`.\n\n- `index_col` is the column name to use as the index, default is None.\n- `default_index_type` is the default index type, default is "distributed-sequence". More info about default index type could be found on Spark official [documentation](https://spark.apache.org/docs/latest/api/python/user_guide/pandas_on_spark/options.html#default-index-type)\n\nHere is an example code snippet for Spark Data:\n\n```python\nimport pandas as pd\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n\n# Creating a dictionary\ndata = {\n    "Square_Feet": [800, 1200, 1800, 1500, 850],\n    "Age_Years": [20, 15, 10, 7, 25],\n    "Price": [100000, 200000, 300000, 240000, 120000],\n}\n\n# Creating a pandas DataFrame\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n```\n\nTo use Spark ML models you need to format your data appropriately. Specifically, use [`VectorAssembler`](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.feature.VectorAssembler.html) to merge all feature columns into a single vector column.\n\nHere is an example of how to use it:\n\n```python\nfrom pyspark.ml.feature import VectorAssembler\n\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n```\n\nLater in conducting the experiment, use your pandas-on-spark data like non-spark data and pass them using `X_train, y_train` or `dataframe, label`.\n\n### Estimators\n\n#### Model List\n\n- `lgbm_spark`: The class for fine-tuning Spark version LightGBM models, using [SynapseML](https://microsoft.github.io/SynapseML/docs/features/lightgbm/about/) API.\n\n#### Usage\n\nFirst, prepare your data in the required format as described in the previous section.\n\nBy including the models you intend to try in the `estimators_list` argument to `flaml.automl`, FLAML will start trying configurations for these models. If your input is Spark data, FLAML will also use estimators with the `_spark` postfix by default, even if you haven\'t specified them.\n\nHere is an example code snippet using SparkML models in AutoML:\n\n```python\nimport flaml\n\n# prepare your data in pandas-on-spark format as we previously mentioned\nautoml = flaml.AutoML()\nsettings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "estimator_list": ["lgbm_spark"],  # this setting is optional\n    "task": "regression",\n}\n\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **settings,\n)\n```\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/automl_bankrupt_synapseml.ipynb)\n\n## Parallel Spark Jobs\n\nYou can activate Spark as the parallel backend during parallel tuning in both [AutoML](/docs/Use-Cases/Task-Oriented-AutoML#parallel-tuning) and [Hyperparameter Tuning](/docs/Use-Cases/Tune-User-Defined-Function#parallel-tuning), by setting the `use_spark` to `true`. FLAML will dispatch your job to the distributed Spark backend using [`joblib-spark`](https://github.com/joblib/joblib-spark).\n\nPlease note that you should not set `use_spark` to `true` when applying AutoML and Tuning for Spark Data. This is because only SparkML models will be used for Spark Data in AutoML and Tuning. As SparkML models run in parallel, there is no need to distribute them with `use_spark` again.\n\nAll the Spark-related arguments are stated below. These arguments are available in both Hyperparameter Tuning and AutoML:\n\n- `use_spark`: boolean, default=False | Whether to use spark to run the training in parallel spark jobs. This can be used to accelerate training on large models and large datasets, but will incur more overhead in time and thus slow down training in some cases. GPU training is not supported yet when use_spark is True. For Spark clusters, by default, we will launch one trial per executor. However, sometimes we want to launch more trials than the number of executors (e.g., local mode). In this case, we can set the environment variable `FLAML_MAX_CONCURRENT` to override the detected `num_executors`. The final number of concurrent trials will be the minimum of `n_concurrent_trials` and `num_executors`.\n- `n_concurrent_trials`: int, default=1 | The number of concurrent trials. When n_concurrent_trials > 1, FLAML performes parallel tuning.\n- `force_cancel`: boolean, default=False | Whether to forcely cancel Spark jobs if the search time exceeded the time budget. Spark jobs include parallel tuning jobs and Spark-based model training jobs.\n\nAn example code snippet for using parallel Spark jobs:\n\n```python\nimport flaml\n\nautoml_experiment = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True,  # Activating the force_cancel option can immediately halt Spark jobs once they exceed the allocated time_budget.\n}\n\nautoml.fit(\n    dataframe=dataframe,\n    label=label,\n    **automl_settings,\n)\n```\n\n[Link to notebook](https://github.com/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb) | [Open in colab](https://colab.research.google.com/github/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb)\n\n\n*************************************************************\n\n--------------------------------------------------------------------------------\n\nNext speaker: Product_Manager\n\nProduct_Manager (to chat_manager):\n\nTo use Spark for parallel training in FLAML, follow these steps:\n\n## Steps:\n\n1. **Prepare Your Data:**\n   Convert your data into a pandas-on-spark DataFrame using `to_pandas_on_spark` function.\n\n2. **Configure Spark Settings:**\n   Set the `use_spark` parameter to `True` to enable Spark for parallel training jobs.\n\n3. **Run the AutoML Experiment:**\n   Configure the AutoML settings and run the experiment.\n\n## Sample Code:\n\n```python\nimport pandas as pd\nimport flaml\nfrom flaml.automl.spark.utils import to_pandas_on_spark\n\n# Prepare your data\ndata = {\n    "Square_Feet": [800, 1200, 1800, 1500, 850],\n    "Age_Years": [20, 15, 10, 7, 25],\n    "Price": [100000, 200000, 300000, 240000, 120000],\n}\n\ndataframe = pd.DataFrame(data)\nlabel = "Price"\n\n# Convert to pandas-on-spark dataframe\npsdf = to_pandas_on_spark(dataframe)\n\n# Use VectorAssembler to format data for Spark ML\nfrom pyspark.ml.feature import VectorAssembler\n\ncolumns = psdf.columns\nfeature_cols = [col for col in columns if col != label]\nfeaturizer = VectorAssembler(inputCols=feature_cols, outputCol="features")\npsdf = featurizer.transform(psdf.to_spark(index_col="index"))["index", "features"]\n\n# Configure AutoML settings\nautoml = flaml.AutoML()\nautoml_settings = {\n    "time_budget": 30,\n    "metric": "r2",\n    "task": "regression",\n    "n_concurrent_trials": 2,\n    "use_spark": True,\n    "force_cancel": True,  # Optionally force cancel jobs that exceed time budget\n}\n\n# Run the AutoML experiment\nautoml.fit(\n    dataframe=psdf,\n    label=label,\n    **automl_settings,\n)\n```\n\nThis code demonstrates how to prepare your data, configure Spark settings for parallel training, and run the AutoML experiment using FLAML with Spark.\n\nYou can find more information and examples in the [FLAML documentation](https://github.com/microsoft/FLAML/blob/main/notebook/integrate_spark.ipynb).\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n\nNext speaker: Senior_Python_Engineer\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"2024-08-14 07:09:05,717 - autogen.agentchat.contrib.retrieve_user_proxy_agent - INFO - Use the existing collection `groupchat`.\n2024-08-14 07:09:05,845 - autogen.agentchat.contrib.retrieve_user_proxy_agent - INFO - Found 2 chunks.\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>s});var a=t(67294);const o={},r=a.createContext(o);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);