"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1951],{84724:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var i=t(85893),r=t(11151);const s={sidebar_label:"qdrant_retrieve_user_proxy_agent",title:"agentchat.contrib.qdrant_retrieve_user_proxy_agent"},o=void 0,l={id:"reference/agentchat/contrib/qdrant_retrieve_user_proxy_agent",title:"agentchat.contrib.qdrant_retrieve_user_proxy_agent",description:"QdrantRetrieveUserProxyAgent",source:"@site/docs/reference/agentchat/contrib/qdrant_retrieve_user_proxy_agent.md",sourceDirName:"reference/agentchat/contrib",slug:"/reference/agentchat/contrib/qdrant_retrieve_user_proxy_agent",permalink:"/autogen/docs/reference/agentchat/contrib/qdrant_retrieve_user_proxy_agent",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/reference/agentchat/contrib/qdrant_retrieve_user_proxy_agent.md",tags:[],version:"current",frontMatter:{sidebar_label:"qdrant_retrieve_user_proxy_agent",title:"agentchat.contrib.qdrant_retrieve_user_proxy_agent"},sidebar:"referenceSideBar",previous:{title:"multimodal_conversable_agent",permalink:"/autogen/docs/reference/agentchat/contrib/multimodal_conversable_agent"},next:{title:"retrieve_assistant_agent",permalink:"/autogen/docs/reference/agentchat/contrib/retrieve_assistant_agent"}},a={},d=[{value:"QdrantRetrieveUserProxyAgent",id:"qdrantretrieveuserproxyagent",level:2},{value:"__init__",id:"__init__",level:3},{value:"retrieve_docs",id:"retrieve_docs",level:3},{value:"create_qdrant_from_dir",id:"create_qdrant_from_dir",level:3},{value:"query_qdrant",id:"query_qdrant",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"qdrantretrieveuserproxyagent",children:"QdrantRetrieveUserProxyAgent"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class QdrantRetrieveUserProxyAgent(RetrieveUserProxyAgent)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"__init__",children:"__init__"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def __init__(name="RetrieveChatAgent",\n             human_input_mode: Literal["ALWAYS", "NEVER",\n                                       "TERMINATE"] = "ALWAYS",\n             is_termination_msg: Optional[Callable[[Dict], bool]] = None,\n             retrieve_config: Optional[Dict] = None,\n             **kwargs)\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"})," ",(0,i.jsx)(n.em,{children:"str"})," - name of the agent."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"human_input_mode"})," ",(0,i.jsx)(n.em,{children:"str"}),' - whether to ask for human inputs every time a message is received.\nPossible values are "ALWAYS", "TERMINATE", "NEVER".\n',(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:'When "ALWAYS", the agent prompts for human input every time a message is received.\nUnder this mode, the conversation stops when the human input is "exit",\nor when is_termination_msg is True and there is no human input.'}),"\n",(0,i.jsx)(n.li,{children:'When "TERMINATE", the agent only prompts for human input only when a termination message is received or\nthe number of auto reply reaches the max_consecutive_auto_reply.'}),"\n",(0,i.jsx)(n.li,{children:'When "NEVER", the agent will never prompt for human input. Under this mode, the conversation stops\nwhen the number of auto reply reaches the max_consecutive_auto_reply or when is_termination_msg is True.'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"is_termination_msg"})," ",(0,i.jsx)(n.em,{children:"function"}),' - a function that takes a message in the form of a dictionary\nand returns a boolean value indicating if this received message is a termination message.\nThe dict can contain the following keys: "content", "role", "name", "function_call".']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"retrieve_config"})," ",(0,i.jsx)(n.em,{children:"dict or None"})," - config for the retrieve agent.\nTo use default config, set to None. Otherwise, set to a dictionary with the following keys:\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:['task (Optional, str): the task of the retrieve chat. Possible values are "code", "qa" and "default". System\nprompt will be different for different tasks. The default value is ',(0,i.jsx)(n.code,{children:"default"}),", which supports both code and qa."]}),"\n",(0,i.jsxs)(n.li,{children:['client (Optional, qdrant_client.QdrantClient(":memory:")): A QdrantClient instance. If not provided, an in-memory instance will be assigned. Not recommended for production.\nwill be used. If you want to use other vector db, extend this class and override the ',(0,i.jsx)(n.code,{children:"retrieve_docs"})," function."]}),"\n",(0,i.jsx)(n.li,{children:"docs_path (Optional, Union[str, List[str]]): the path to the docs directory. It can also be the path to a single file,\nthe url to a single file or a list of directories, files and urls. Default is None, which works only if the collection is already created."}),"\n",(0,i.jsx)(n.li,{children:'extra_docs (Optional, bool): when true, allows adding documents with unique IDs without overwriting existing ones; when false, it replaces existing documents using default IDs, risking collection overwrite.,\nwhen set to true it enables the system to assign unique IDs starting from "length+i" for new document chunks, preventing the replacement of existing documents and facilitating the addition of more content to the collection..\nBy default, "extra_docs" is set to false, starting document IDs from zero. This poses a risk as new documents might overwrite existing ones, potentially causing unintended loss or alteration of data in the collection.'}),"\n",(0,i.jsxs)(n.li,{children:["collection_name (Optional, str): the name of the collection.\nIf key not provided, a default name ",(0,i.jsx)(n.code,{children:"autogen-docs"})," will be used."]}),"\n",(0,i.jsxs)(n.li,{children:["model (Optional, str): the model to use for the retrieve chat.\nIf key not provided, a default model ",(0,i.jsx)(n.code,{children:"gpt-4"})," will be used."]}),"\n",(0,i.jsxs)(n.li,{children:["chunk_token_size (Optional, int): the chunk token size for the retrieve chat.\nIf key not provided, a default size ",(0,i.jsx)(n.code,{children:"max_tokens * 0.4"})," will be used."]}),"\n",(0,i.jsxs)(n.li,{children:["context_max_tokens (Optional, int): the context max token size for the retrieve chat.\nIf key not provided, a default size ",(0,i.jsx)(n.code,{children:"max_tokens * 0.8"})," will be used."]}),"\n",(0,i.jsxs)(n.li,{children:['chunk_mode (Optional, str): the chunk mode for the retrieve chat. Possible values are\n"multi_lines" and "one_line". If key not provided, a default mode ',(0,i.jsx)(n.code,{children:"multi_lines"})," will be used."]}),"\n",(0,i.jsx)(n.li,{children:'must_break_at_empty_line (Optional, bool): chunk will only break at empty line if True. Default is True.\nIf chunk_mode is "one_line", this parameter will be ignored.'}),"\n",(0,i.jsxs)(n.li,{children:["embedding_model (Optional, str): the embedding model to use for the retrieve chat.\nIf key not provided, a default model ",(0,i.jsx)(n.code,{children:"BAAI/bge-small-en-v1.5"})," will be used. All available models\ncan be found at ",(0,i.jsx)(n.code,{children:"https://qdrant.github.io/fastembed/examples/Supported_Models/"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"customized_prompt (Optional, str): the customized prompt for the retrieve chat. Default is None."}),"\n",(0,i.jsxs)(n.li,{children:['customized_answer_prefix (Optional, str): the customized answer prefix for the retrieve chat. Default is "".\nIf not "" and the customized_answer_prefix is not in the answer, ',(0,i.jsx)(n.code,{children:"Update Context"})," will be triggered."]}),"\n",(0,i.jsxs)(n.li,{children:["update_context (Optional, bool): if False, will not apply ",(0,i.jsx)(n.code,{children:"Update Context"})," for interactive retrieval. Default is True."]}),"\n",(0,i.jsx)(n.li,{children:"custom_token_count_function (Optional, Callable): a custom function to count the number of tokens in a string.\nThe function should take a string as input and return three integers (token_count, tokens_per_message, tokens_per_name).\nDefault is None, tiktoken will be used and may not be accurate for non-OpenAI models."}),"\n",(0,i.jsxs)(n.li,{children:["custom_text_split_function (Optional, Callable): a custom function to split a string into a list of strings.\nDefault is None, will use the default function in ",(0,i.jsx)(n.code,{children:"autogen.retrieve_utils.split_text_to_chunks"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["custom_text_types (Optional, List[str]): a list of file types to be processed. Default is ",(0,i.jsx)(n.code,{children:"autogen.retrieve_utils.TEXT_FORMATS"}),".\nThis only applies to files under the directories in ",(0,i.jsx)(n.code,{children:"docs_path"}),". Explicitly included files and urls will be chunked regardless of their types."]}),"\n",(0,i.jsx)(n.li,{children:"recursive (Optional, bool): whether to search documents recursively in the docs_path. Default is True."}),"\n",(0,i.jsx)(n.li,{children:"parallel (Optional, int): How many parallel workers to use for embedding. Defaults to the number of CPU cores."}),"\n",(0,i.jsx)(n.li,{children:"on_disk (Optional, bool): Whether to store the collection on disk. Default is False."}),"\n",(0,i.jsx)(n.li,{children:"quantization_config: Quantization configuration. If None, quantization will be disabled."}),"\n",(0,i.jsxs)(n.li,{children:["hnsw_config: HNSW configuration. If None, default configuration will be used.\nYou can find more info about the hnsw configuration options at ",(0,i.jsx)(n.a,{href:"https://qdrant.tech/documentation/concepts/indexing/#vector-index",children:"https://qdrant.tech/documentation/concepts/indexing/#vector-index"}),".\nAPI Reference: ",(0,i.jsx)(n.a,{href:"https://qdrant.github.io/qdrant/redoc/index.html#tag/collections/operation/create_collection",children:"https://qdrant.github.io/qdrant/redoc/index.html#tag/collections/operation/create_collection"})]}),"\n",(0,i.jsxs)(n.li,{children:["payload_indexing: Whether to create a payload index for the document field. Default is False.\nYou can find more info about the payload indexing options at ",(0,i.jsx)(n.a,{href:"https://qdrant.tech/documentation/concepts/indexing/#payload-index",children:"https://qdrant.tech/documentation/concepts/indexing/#payload-index"}),"\nAPI Reference: ",(0,i.jsx)(n.a,{href:"https://qdrant.github.io/qdrant/redoc/index.html#tag/collections/operation/create_field_index",children:"https://qdrant.github.io/qdrant/redoc/index.html#tag/collections/operation/create_field_index"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"**kwargs"})," ",(0,i.jsx)(n.em,{children:"dict"})," - other kwargs in ",(0,i.jsx)(n.a,{href:"../user_proxy_agent#__init__",children:"UserProxyAgent"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"retrieve_docs",children:"retrieve_docs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def retrieve_docs(problem: str, n_results: int = 20, search_string: str = "")\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"problem"})," ",(0,i.jsx)(n.em,{children:"str"})," - the problem to be solved."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"n_results"})," ",(0,i.jsx)(n.em,{children:"int"})," - the number of results to be retrieved. Default is 20."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"search_string"})," ",(0,i.jsx)(n.em,{children:"str"}),' - only docs that contain an exact match of this string will be retrieved. Default is "".']}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"create_qdrant_from_dir",children:"create_qdrant_from_dir"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def create_qdrant_from_dir(\n        dir_path: str,\n        max_tokens: int = 4000,\n        client: QdrantClient = None,\n        collection_name: str = "all-my-documents",\n        chunk_mode: str = "multi_lines",\n        must_break_at_empty_line: bool = True,\n        embedding_model: str = "BAAI/bge-small-en-v1.5",\n        custom_text_split_function: Callable = None,\n        custom_text_types: List[str] = TEXT_FORMATS,\n        recursive: bool = True,\n        extra_docs: bool = False,\n        parallel: int = 0,\n        on_disk: bool = False,\n        quantization_config: Optional[models.QuantizationConfig] = None,\n        hnsw_config: Optional[models.HnswConfigDiff] = None,\n        payload_indexing: bool = False,\n        qdrant_client_options: Optional[Dict] = {})\n'})}),"\n",(0,i.jsx)(n.p,{children:"Create a Qdrant collection from all the files in a given directory, the directory can also be a single file or a\nurl to a single file."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"dir_path"})," ",(0,i.jsx)(n.em,{children:"str"})," - the path to the directory, file or url."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"max_tokens"})," ",(0,i.jsx)(n.em,{children:"Optional, int"})," - the maximum number of tokens per chunk. Default is 4000."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"client"})," ",(0,i.jsx)(n.em,{children:"Optional, QdrantClient"})," - the QdrantClient instance. Default is None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"collection_name"})," ",(0,i.jsx)(n.em,{children:"Optional, str"}),' - the name of the collection. Default is "all-my-documents".']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"chunk_mode"})," ",(0,i.jsx)(n.em,{children:"Optional, str"}),' - the chunk mode. Default is "multi_lines".']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"must_break_at_empty_line"})," ",(0,i.jsx)(n.em,{children:"Optional, bool"})," - Whether to break at empty line. Default is True."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"embedding_model"})," ",(0,i.jsx)(n.em,{children:"Optional, str"}),' - the embedding model to use. Default is "BAAI/bge-small-en-v1.5".\nThe list of all the available models can be at ',(0,i.jsx)(n.a,{href:"https://qdrant.github.io/fastembed/examples/Supported_Models/",children:"https://qdrant.github.io/fastembed/examples/Supported_Models/"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"custom_text_split_function"})," ",(0,i.jsx)(n.em,{children:"Optional, Callable"})," - a custom function to split a string into a list of strings.\nDefault is None, will use the default function in ",(0,i.jsx)(n.code,{children:"autogen.retrieve_utils.split_text_to_chunks"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"custom_text_types"})," ",(0,i.jsx)(n.em,{children:"Optional, List[str]"})," - a list of file types to be processed. Default is TEXT_FORMATS."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"recursive"})," ",(0,i.jsx)(n.em,{children:"Optional, bool"})," - whether to search documents recursively in the dir_path. Default is True."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"extra_docs"})," ",(0,i.jsx)(n.em,{children:"Optional, bool"})," - whether to add more documents in the collection. Default is False"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parallel"})," ",(0,i.jsx)(n.em,{children:"Optional, int"})," - How many parallel workers to use for embedding. Defaults to the number of CPU cores"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"on_disk"})," ",(0,i.jsx)(n.em,{children:"Optional, bool"})," - Whether to store the collection on disk. Default is False."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"quantization_config"})," - Quantization configuration. If None, quantization will be disabled."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Ref"})," - ",(0,i.jsx)(n.a,{href:"https://qdrant.github.io/qdrant/redoc/index.html#tag/collections/operation/create_collection",children:"https://qdrant.github.io/qdrant/redoc/index.html#tag/collections/operation/create_collection"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"hnsw_config"})," - HNSW configuration. If None, default configuration will be used."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Ref"})," - ",(0,i.jsx)(n.a,{href:"https://qdrant.github.io/qdrant/redoc/index.html#tag/collections/operation/create_collection",children:"https://qdrant.github.io/qdrant/redoc/index.html#tag/collections/operation/create_collection"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"payload_indexing"})," - Whether to create a payload index for the document field. Default is False."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"qdrant_client_options"})," - (Optional, dict): the options for instantiating the qdrant client."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Ref"})," - ",(0,i.jsx)(n.a,{href:"https://github.com/qdrant/qdrant-client/blob/master/qdrant_client/qdrant_client.py#L36-L58",children:"https://github.com/qdrant/qdrant-client/blob/master/qdrant_client/qdrant_client.py#L36-L58"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"query_qdrant",children:"query_qdrant"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def query_qdrant(\n        query_texts: List[str],\n        n_results: int = 10,\n        client: QdrantClient = None,\n        collection_name: str = "all-my-documents",\n        search_string: str = "",\n        embedding_model: str = "BAAI/bge-small-en-v1.5",\n        qdrant_client_options: Optional[Dict] = {}\n) -> List[List[QueryResponse]]\n'})}),"\n",(0,i.jsx)(n.p,{children:"Perform a similarity search with filters on a Qdrant collection"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"query_texts"})," ",(0,i.jsx)(n.em,{children:"List[str]"})," - the query texts."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"n_results"})," ",(0,i.jsx)(n.em,{children:"Optional, int"})," - the number of results to return. Default is 10."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"client"})," ",(0,i.jsx)(n.em,{children:"Optional, API"})," - the QdrantClient instance. A default in-memory client will be instantiated if None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"collection_name"})," ",(0,i.jsx)(n.em,{children:"Optional, str"}),' - the name of the collection. Default is "all-my-documents".']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"search_string"})," ",(0,i.jsx)(n.em,{children:"Optional, str"}),' - the search string. Default is "".']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"embedding_model"})," ",(0,i.jsx)(n.em,{children:"Optional, str"}),' - the embedding model to use. Default is "all-MiniLM-L6-v2". Will be ignored if embedding_function is not None.']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"qdrant_client_options"})," - (Optional, dict): the options for instantiating the qdrant client. Reference: ",(0,i.jsx)(n.a,{href:"https://github.com/qdrant/qdrant-client/blob/master/qdrant_client/qdrant_client.py#L36-L58",children:"https://github.com/qdrant/qdrant-client/blob/master/qdrant_client/qdrant_client.py#L36-L58"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"List[List[QueryResponse]]"}),' - the query result. The format is:\nclass QueryResponse(BaseModel, extra="forbid"):  # type: ignore']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"id"})," - Union[str, int]"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"embedding"})," - Optional[List[float]]"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"metadata"})," - Dict[str, Any]"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"document"})," - str"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"score"})," - float"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>o});var i=t(67294);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);