"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3848],{21175:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var a=n(85893),i=n(11151);const o={},s="Retrieval Augmentation",r={id:"topics/retrieval_augmentation",title:"Retrieval Augmentation",description:"Retrieval Augmented Generation (RAG) is a powerful technique that combines language models with external knowledge retrieval to improve the quality and relevance of generated responses.",source:"@site/docs/topics/retrieval_augmentation.md",sourceDirName:"topics",slug:"/topics/retrieval_augmentation",permalink:"/autogen/docs/topics/retrieval_augmentation",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/topics/retrieval_augmentation.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"LLM Reflection",permalink:"/autogen/docs/topics/prompting-and-reasoning/reflection"},next:{title:"Task Decomposition",permalink:"/autogen/docs/topics/task_decomposition"}},c={},l=[{value:"Example Setup: RAG with Retrieval Augmented Agents",id:"example-setup-rag-with-retrieval-augmented-agents",level:2},{value:"Step 1. Create an instance of <code>AssistantAgent</code> and <code>RetrieveUserProxyAgent</code>.",id:"step-1-create-an-instance-of-assistantagent-and-retrieveuserproxyagent",level:3},{value:"Step 2. Initiating Agent Chat with Retrieval Augmentation",id:"step-2-initiating-agent-chat-with-retrieval-augmentation",level:3},{value:"Example Setup: RAG with Retrieval Augmented Agents with PGVector",id:"example-setup-rag-with-retrieval-augmented-agents-with-pgvector",level:2},{value:"Step 1. Create an instance of <code>AssistantAgent</code> and <code>RetrieveUserProxyAgent</code>.",id:"step-1-create-an-instance-of-assistantagent-and-retrieveuserproxyagent-1",level:3},{value:"Step 2. Initiating Agent Chat with Retrieval Augmentation",id:"step-2-initiating-agent-chat-with-retrieval-augmentation-1",level:3},{value:"Online Demo",id:"online-demo",level:2},{value:"More Examples and Notebooks",id:"more-examples-and-notebooks",level:2},{value:"Roadmap",id:"roadmap",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"retrieval-augmentation",children:"Retrieval Augmentation"}),"\n",(0,a.jsx)(t.p,{children:"Retrieval Augmented Generation (RAG) is a powerful technique that combines language models with external knowledge retrieval to improve the quality and relevance of generated responses."}),"\n",(0,a.jsxs)(t.p,{children:["One way to realize RAG in AutoGen is to construct agent chats with ",(0,a.jsx)(t.code,{children:"AssistantAgent"})," and ",(0,a.jsx)(t.code,{children:"RetrieveUserProxyAgent"})," classes."]}),"\n",(0,a.jsx)(t.h2,{id:"example-setup-rag-with-retrieval-augmented-agents",children:"Example Setup: RAG with Retrieval Augmented Agents"}),"\n",(0,a.jsx)(t.p,{children:"The following is an example setup demonstrating how to create retrieval augmented agents in AutoGen:"}),"\n",(0,a.jsxs)(t.h3,{id:"step-1-create-an-instance-of-assistantagent-and-retrieveuserproxyagent",children:["Step 1. Create an instance of ",(0,a.jsx)(t.code,{children:"AssistantAgent"})," and ",(0,a.jsx)(t.code,{children:"RetrieveUserProxyAgent"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Here ",(0,a.jsx)(t.code,{children:"RetrieveUserProxyAgent"})," instance acts as a proxy agent that retrieves relevant information based on the user's input."]}),"\n",(0,a.jsxs)(t.p,{children:["Refer to the ",(0,a.jsx)(t.a,{href:"https://microsoft.github.io/autogen/docs/reference/agentchat/contrib/retrieve_user_proxy_agent",children:"doc"}),"\nfor more information on the detailed configurations."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'assistant = AssistantAgent(\n    name="assistant",\n    system_message="You are a helpful assistant.",\n    llm_config={\n        "timeout": 600,\n        "cache_seed": 42,\n        "config_list": config_list,\n    },\n)\nragproxyagent = RetrieveUserProxyAgent(\n    name="ragproxyagent",\n    human_input_mode="NEVER",\n    max_consecutive_auto_reply=3,\n    retrieve_config={\n        "task": "code",\n        "docs_path": [\n            "https://raw.githubusercontent.com/microsoft/FLAML/main/website/docs/Examples/Integrate%20-%20Spark.md",\n            "https://raw.githubusercontent.com/microsoft/FLAML/main/website/docs/Research.md",\n            os.path.join(os.path.abspath(""), "..", "website", "docs"),\n        ],\n        "custom_text_types": ["mdx"],\n        "chunk_token_size": 2000,\n        "model": config_list[0]["model"],\n        "client": chromadb.PersistentClient(path="/tmp/chromadb"),\n        "embedding_model": "all-mpnet-base-v2",\n        "get_or_create": True,  # set to False if you don\'t want to reuse an existing collection, but you\'ll need to remove the collection manually\n    },\n    code_execution_config=False,  # set to False if you don\'t want to execute the code\n)\n'})}),"\n",(0,a.jsx)(t.h3,{id:"step-2-initiating-agent-chat-with-retrieval-augmentation",children:"Step 2. Initiating Agent Chat with Retrieval Augmentation"}),"\n",(0,a.jsx)(t.p,{children:"Once the retrieval augmented agents are set up, you can initiate a chat with retrieval augmentation using the following code:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'code_problem = "How can I use FLAML to perform a classification task and use spark to do parallel training. Train 30 seconds and force cancel jobs if time limit is reached."\nragproxyagent.initiate_chat(\n    assistant, message=ragproxyagent.message_generator, problem=code_problem, search_string="spark"\n)  # search_string is used as an extra filter for the embeddings search, in this case, we only want to search documents that contain "spark".\n'})}),"\n",(0,a.jsx)(t.h2,{id:"example-setup-rag-with-retrieval-augmented-agents-with-pgvector",children:"Example Setup: RAG with Retrieval Augmented Agents with PGVector"}),"\n",(0,a.jsx)(t.p,{children:"The following is an example setup demonstrating how to create retrieval augmented agents in AutoGen:"}),"\n",(0,a.jsxs)(t.h3,{id:"step-1-create-an-instance-of-assistantagent-and-retrieveuserproxyagent-1",children:["Step 1. Create an instance of ",(0,a.jsx)(t.code,{children:"AssistantAgent"})," and ",(0,a.jsx)(t.code,{children:"RetrieveUserProxyAgent"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Here ",(0,a.jsx)(t.code,{children:"RetrieveUserProxyAgent"})," instance acts as a proxy agent that retrieves relevant information based on the user's input."]}),"\n",(0,a.jsx)(t.p,{children:"Specify the connection_string, or the host, port, database, username, and password in the db_config."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'assistant = AssistantAgent(\n    name="assistant",\n    system_message="You are a helpful assistant.",\n    llm_config={\n        "timeout": 600,\n        "cache_seed": 42,\n        "config_list": config_list,\n    },\n)\nragproxyagent = RetrieveUserProxyAgent(\n    name="ragproxyagent",\n    human_input_mode="NEVER",\n    max_consecutive_auto_reply=3,\n    retrieve_config={\n        "task": "code",\n        "docs_path": [\n            "https://raw.githubusercontent.com/microsoft/FLAML/main/website/docs/Examples/Integrate%20-%20Spark.md",\n            "https://raw.githubusercontent.com/microsoft/FLAML/main/website/docs/Research.md",\n            os.path.join(os.path.abspath(""), "..", "website", "docs"),\n        ],\n        "vector_db": "pgvector",\n        "collection_name": "autogen_docs",\n        "db_config": {\n            "connection_string": "postgresql://testuser:testpwd@localhost:5432/vectordb", # Optional - connect to an external vector database\n            # "host": None, # Optional vector database host\n            # "port": None, # Optional vector database port\n            # "database": None, # Optional vector database name\n            # "username": None, # Optional vector database username\n            # "password": None, # Optional vector database password\n        },\n        "custom_text_types": ["mdx"],\n        "chunk_token_size": 2000,\n        "model": config_list[0]["model"],\n        "get_or_create": True,\n    },\n    code_execution_config=False,\n)\n'})}),"\n",(0,a.jsx)(t.h3,{id:"step-2-initiating-agent-chat-with-retrieval-augmentation-1",children:"Step 2. Initiating Agent Chat with Retrieval Augmentation"}),"\n",(0,a.jsx)(t.p,{children:"Once the retrieval augmented agents are set up, you can initiate a chat with retrieval augmentation using the following code:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'code_problem = "How can I use FLAML to perform a classification task and use spark to do parallel training. Train 30 seconds and force cancel jobs if time limit is reached."\nragproxyagent.initiate_chat(\n    assistant, message=ragproxyagent.message_generator, problem=code_problem, search_string="spark"\n)  # search_string is used as an extra filter for the embeddings search, in this case, we only want to search documents that contain "spark".\n'})}),"\n",(0,a.jsx)(t.h2,{id:"online-demo",children:"Online Demo"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://huggingface.co/spaces/thinkall/autogen-demos",children:"Retrival-Augmented Chat Demo on Huggingface"})}),"\n",(0,a.jsx)(t.h2,{id:"more-examples-and-notebooks",children:"More Examples and Notebooks"}),"\n",(0,a.jsx)(t.p,{children:"For more detailed examples and notebooks showcasing the usage of retrieval augmented agents in AutoGen, refer to the following:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Automated Code Generation and Question Answering with Retrieval Augmented Agents - ",(0,a.jsx)(t.a,{href:"/docs/notebooks/agentchat_RetrieveChat",children:"View Notebook"})]}),"\n",(0,a.jsxs)(t.li,{children:["Automated Code Generation and Question Answering with ",(0,a.jsx)(t.a,{href:"https://github.com/pgvector/pgvector",children:"PGVector"})," based Retrieval Augmented Agents - ",(0,a.jsx)(t.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_RetrieveChat_pgvector.ipynb",children:"View Notebook"})]}),"\n",(0,a.jsxs)(t.li,{children:["Automated Code Generation and Question Answering with ",(0,a.jsx)(t.a,{href:"https://qdrant.tech/",children:"Qdrant"})," based Retrieval Augmented Agents - ",(0,a.jsx)(t.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_RetrieveChat_qdrant.ipynb",children:"View Notebook"})]}),"\n",(0,a.jsxs)(t.li,{children:["Chat with OpenAI Assistant with Retrieval Augmentation - ",(0,a.jsx)(t.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_oai_assistant_retrieval.ipynb",children:"View Notebook"})]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"RAG"}),": Group Chat with Retrieval Augmented Generation (with 5 group member agents and 1 manager agent) - ",(0,a.jsx)(t.a,{href:"/docs/notebooks/agentchat_groupchat_RAG",children:"View Notebook"})]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"roadmap",children:"Roadmap"}),"\n",(0,a.jsxs)(t.p,{children:["Explore our detailed roadmap ",(0,a.jsx)(t.a,{href:"https://github.com/microsoft/autogen/issues/1657",children:"here"})," for further advancements plan around RAG. Your contributions, feedback, and use cases are highly appreciated! We invite you to engage with us and play a pivotal role in the development of this impactful feature."]})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>s});var a=n(67294);const i={},o=a.createContext(i);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);